// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package f5coin

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BusinessABI is the input ABI used to generate the binding from.
const BusinessABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"_stashName\",\"type\":\"bytes32\"}],\"name\":\"getState\",\"outputs\":[{\"name\":\"\",\"type\":\"int8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stashNames\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMember\",\"type\":\"address\"}],\"name\":\"registerMemberApi\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCreditHistoryLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stashName\",\"type\":\"bytes32\"},{\"name\":\"_typeState\",\"type\":\"int8\"}],\"name\":\"reCreateStash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"debitIdx\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"transfers\",\"outputs\":[{\"name\":\"txRef\",\"type\":\"bytes32\"},{\"name\":\"sender\",\"type\":\"bytes32\"},{\"name\":\"receiver\",\"type\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"int256\"},{\"name\":\"note\",\"type\":\"string\"},{\"name\":\"txType\",\"type\":\"int8\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"credits\",\"outputs\":[{\"name\":\"txRef\",\"type\":\"bytes32\"},{\"name\":\"stashName\",\"type\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"int256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stashName\",\"type\":\"bytes32\"},{\"name\":\"_stash\",\"type\":\"address\"}],\"name\":\"loadStashRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_txRef\",\"type\":\"bytes32\"},{\"name\":\"_stashName\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"int256\"}],\"name\":\"debit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creditIdx\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stashName\",\"type\":\"bytes32\"},{\"name\":\"_typeState\",\"type\":\"int8\"}],\"name\":\"createStash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stashName\",\"type\":\"bytes32\"}],\"name\":\"getType\",\"outputs\":[{\"name\":\"\",\"type\":\"int8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stashName\",\"type\":\"bytes32\"},{\"name\":\"_stashState\",\"type\":\"int8\"}],\"name\":\"setState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDebitHistoryLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stashName\",\"type\":\"bytes32\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"debits\",\"outputs\":[{\"name\":\"txRef\",\"type\":\"bytes32\"},{\"name\":\"stashName\",\"type\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"int256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_txRef\",\"type\":\"bytes32\"},{\"name\":\"_sender\",\"type\":\"bytes32\"},{\"name\":\"_receiver\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"int256\"},{\"name\":\"_note\",\"type\":\"string\"},{\"name\":\"_txType\",\"type\":\"int8\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"sender_bal\",\"type\":\"int256\"},{\"name\":\"receiver_bal\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_txRef\",\"type\":\"bytes32\"},{\"name\":\"_stashName\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"int256\"}],\"name\":\"credit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"s\",\"type\":\"string\"}],\"name\":\"string_tobytes\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferIdx\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTransferHistoryLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRegistedAccEthLength\",\"outputs\":[{\"name\":\"\",\"type\":\"int16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_listAcc\",\"type\":\"address[]\"}],\"name\":\"registerAccETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMemberApiIdxLenght\",\"outputs\":[{\"name\":\"\",\"type\":\"int16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnerAllStash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStashNamesLenght\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"stashRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet_code\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"wallet_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wallet_type\",\"type\":\"int8\"}],\"name\":\"event_createStash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet_code\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"old_wallet_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"new_wallet_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wallet_type\",\"type\":\"int8\"}],\"name\":\"event_reCreateStash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet_code\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"stashState\",\"type\":\"int8\"},{\"indexed\":false,\"name\":\"oldState\",\"type\":\"int256\"}],\"name\":\"event_setState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"txRef\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"wallet_code\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"event_debit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"txRef\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"wallet_code\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"event_credit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"txRef\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"receiver\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"txType\",\"type\":\"int8\"},{\"indexed\":false,\"name\":\"sender_bal\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"receiver_bal\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"event_transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"listAcc\",\"type\":\"address[]\"}],\"name\":\"event_registerAccETH\",\"type\":\"event\"}]"

// BusinessBin is the compiled bytecode used for deploying new contracts.
const BusinessBin = `0x608060405234801561001057600080fd5b50600080546001600160a01b0319908116339081178216178083556001600160a01b0390811683526001602081905260408420805460ff19168217905583546002805492830181559094527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180549092169216919091179055612d89806100996000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80638d7a194a11610104578063c83fe142116100a2578063e45ab73311610071578063e45ab7331461082d578063eae5180e14610835578063ee9a58121461085b578063fb6cb61f14610863576101da565b8063c83fe14214610744578063d236e1ba14610761578063df64661214610769578063e1b8ff831461078a576101da565b8063a4642866116100de578063a464286614610500578063a6f9dae1146105da578063b91f176e14610600578063bc6d057714610629576101da565b80638d7a194a146104be5780638e739461146104c6578063a2cffc96146104e3576101da565b8063429979131161017c5780637e53308a1161014b5780637e53308a146104315780637f2aeea414610457578063893d20e8146104745780638b356a4d14610498576101da565b8063429979131461037c5780634e3d7de0146103bf5780634ea679e7146103eb578063735677c814610414576101da565b80631d74f2e2116101b85780631d74f2e21461026c5780631e022e7514610274578063203aa89c1461029a5780633c64f04b146102b7576101da565b806309648a9d146101df5780630ae94616146102155780630d3b2b6f14610244575b600080fd5b6101fc600480360360208110156101f557600080fd5b5035610880565b60408051600092830b90920b8252519081900360200190f35b6102326004803603602081101561022b57600080fd5b5035610962565b60408051918252519081900360200190f35b61026a6004803603602081101561025a57600080fd5b50356001600160a01b0316610980565b005b610232610a35565b61026a6004803603604081101561028a57600080fd5b508035906020013560000b610a3c565b610232600480360360208110156102b057600080fd5b5035610ca9565b6102d4600480360360208110156102cd57600080fd5b5035610cb6565b60405180888152602001878152602001868152602001858152602001806020018460000b60000b8152602001838152602001828103825285818151815260200191508051906020019080838360005b8381101561033b578181015183820152602001610323565b50505050905090810190601f1680156103685780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b6103996004803603602081101561039257600080fd5b5035610d94565b604080519485526020850193909352838301919091526060830152519081900360800190f35b61026a600480360360408110156103d557600080fd5b50803590602001356001600160a01b0316610dbb565b61026a6004803603606081101561040157600080fd5b5080359060208101359060400135610e65565b6102326004803603602081101561042a57600080fd5b5035611143565b61026a6004803603604081101561044757600080fd5b508035906020013560000b611150565b6101fc6004803603602081101561046d57600080fd5b50356112f3565b61047c6113a1565b604080516001600160a01b039092168252519081900360200190f35b61026a600480360360408110156104ae57600080fd5b508035906020013560000b6113b0565b610232611590565b610232600480360360208110156104dc57600080fd5b5035611596565b610399600480360360208110156104f957600080fd5b5035611641565b6105c1600480360360c081101561051657600080fd5b81359160208101359160408201359160608101359181019060a08101608082013564010000000081111561054957600080fd5b82018360208201111561055b57600080fd5b8035906020019184600183028401116401000000008311171561057d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093965050509135900b91506116689050565b6040805192835260208301919091528051918290030190f35b61026a600480360360208110156105f057600080fd5b50356001600160a01b0316611fc5565b61026a6004803603606081101561061657600080fd5b5080359060208101359060400135612038565b6106cf6004803603602081101561063f57600080fd5b81019060208101813564010000000081111561065a57600080fd5b82018360208201111561066c57600080fd5b8035906020019184600183028401116401000000008311171561068e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610a39945050505050565b6040805160208082528351818301528351919283929083019185019080838360005b838110156107095781810151838201526020016106f1565b50505050905090810190601f1680156107365780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102326004803603602081101561075a57600080fd5b5035612316565b610232612323565b610771612329565b60408051600192830b90920b8252519081900360200190f35b61026a600480360360208110156107a057600080fd5b8101906020810181356401000000008111156107bb57600080fd5b8201836020820111156107cd57600080fd5b803590602001918460208302840111640100000000831117156107ef57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550612338945050505050565b61077161242d565b61026a6004803603602081101561084b57600080fd5b50356001600160a01b0316612433565b610232612530565b61047c6004803603602081101561087957600080fd5b5035612536565b60008181526003602052604081205481906001600160a01b03166108dc5760408051600160e51b62461bcd0281526020600482015260176024820152600080516020612c46833981519152604482015290519081900360640190fd5b600083815260036020908152604091829020548251600160e01b631865c57d02815292516001600160a01b03909116928392631865c57d92600480840193829003018186803b15801561092e57600080fd5b505afa158015610942573d6000803e3d6000fd5b505050506040513d602081101561095857600080fd5b5051949350505050565b6004818154811061096f57fe5b600091825260209091200154905081565b3360009081526001602052604090205460ff166109d157604051600160e51b62461bcd02815260040180806020018281038252602b815260200180612d33602b913960400191505060405180910390fd5b6001600160a01b031660008181526001602081905260408220805460ff1916821790556002805491820181559091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319169091179055565b6007545b90565b3360009081526001602052604090205460ff16610a8d57604051600160e51b62461bcd02815260040180806020018281038252602b815260200180612d33602b913960400191505060405180910390fd5b6000828152600360205260409020546001600160a01b0316610af95760408051600160e51b62461bcd02815260206004820152601660248201527f544149204b484f414e204348554120544f4e2054414900000000000000000000604482015290519081900360640190fd5b600082815260036020908152604091829020548251600160e01b631865c57d02815292516001600160a01b03909116928392631865c57d92600480840193829003018186803b158015610b4b57600080fd5b505afa158015610b5f573d6000803e3d6000fd5b505050506040513d6020811015610b7557600080fd5b505160000b600314610bbb57604051600160e51b62461bcd02815260040180806020018281038252602f815260200180612d04602f913960400191505060405180910390fd5b60008383604051610bcb90612551565b918252600090810b810b60208301526040805192839003019190f080158015610bf8573d6000803e3d6000fd5b50600085815260036020908152604080832080546001600160a01b038087166001600160a01b03199092168217909255600480546001810182559086527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b018a9055825191881682529281019290925286830b90920b81830152905191925085917f8c8e3419f9e71366ada9d23ae8a8dba5229a20e91deb3cab00f419ea5b0480e89181900360600190a250505050565b6005818154811061096f57fe5b600a602052806000526040600020600091509050806000015490806001015490806002015490806003015490806004018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d7a5780601f10610d4f57610100808354040283529160200191610d7a565b820191906000526020600020905b815481529060010190602001808311610d5d57829003601f168201915b505050506005830154600690930154919260000b91905087565b60086020526000908152604090208054600182015460028301546003909301549192909184565b6000546001600160a01b03163314610e0757604051600160e51b62461bcd028152600401808060200182810382526023815260200180612cb76023913960400191505060405180910390fd5b600082815260036020526040812080546001600160a01b0319166001600160a01b0393909316929092179091556004805460018101825591527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0155565b3360009081526001602052604090205460ff16610eb657604051600160e51b62461bcd02815260040180806020018281038252602b815260200180612d33602b913960400191505060405180910390fd5b60008281526003602052604090205482906001600160a01b0316610f125760408051600160e51b62461bcd0281526020600482015260176024820152600080516020612c46833981519152604482015290519081900360640190fd5b600083815260036020908152604091829020548251600160e01b631865c57d02815292516001600160a01b03909116928392631865c57d92600480840193829003018186803b158015610f6457600080fd5b505afa158015610f78573d6000803e3d6000fd5b505050506040513d6020811015610f8e57600080fd5b505160000b600114806110085750806001600160a01b0316631865c57d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610fd557600080fd5b505afa158015610fe9573d6000803e3d6000fd5b505050506040513d6020811015610fff57600080fd5b505160000b6002145b61104657604051600160e51b62461bcd028152600401808060200182810382526025815260200180612c926025913960400191505060405180910390fd5b806001600160a01b0316638c1fdf82846040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561108c57600080fd5b505af11580156110a0573d6000803e3d6000fd5b50506005805460018181019092557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0018890556000888152600660209081526040918290208a81559283018990556002830188905542600390930183905581518881529081019290925280518894508993507f3e888fb580f7ba504d1d06b6af38e430c683d120af553208a48629dbd58bb0f89281900390910190a35050505050565b6007818154811061096f57fe5b3360009081526001602052604090205460ff166111a157604051600160e51b62461bcd02815260040180806020018281038252602b815260200180612d33602b913960400191505060405180910390fd5b6000828152600360205260409020546001600160a01b03161561120e5760408051600160e51b62461bcd02815260206004820152601460248201527f544149204b484f414e20444120544f4e20544149000000000000000000000000604482015290519081900360640190fd5b6000828260405161121e90612551565b918252600090810b810b60208301526040805192839003019190f08015801561124b573d6000803e3d6000fd5b50600084815260036020908152604080832080546001600160a01b0319166001600160a01b038616908117909155600480546001810182559085527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01889055815190815286840b90930b91830191909152805192935085927f0cb60d28f723451a1bd65a935f5e1d7b4e708818cf6cc6c30ad742fd67531b009281900390910190a2505050565b60008181526003602052604081205481906001600160a01b031661134f5760408051600160e51b62461bcd0281526020600482015260176024820152600080516020612c46833981519152604482015290519081900360640190fd5b600083815260036020908152604091829020548251600160e11b630aed701f02815292516001600160a01b039091169283926315dae03e92600480840193829003018186803b15801561092e57600080fd5b6000546001600160a01b031690565b3360009081526001602052604090205460ff1661140157604051600160e51b62461bcd02815260040180806020018281038252602b815260200180612d33602b913960400191505060405180910390fd5b60008281526003602052604090205482906001600160a01b031661145d5760408051600160e51b62461bcd0281526020600482015260176024820152600080516020612c46833981519152604482015290519081900360640190fd5b6000838152600360209081526040808320548151600160e01b631865c57d02815291516001600160a01b0390911693928492631865c57d9260048083019392829003018186803b1580156114b057600080fd5b505afa1580156114c4573d6000803e3d6000fd5b505050506040513d60208110156114da57600080fd5b505160408051600160e01b631fed9efb028152600087810b810b600483015291519293506001600160a01b03851692631fed9efb9260248084019391929182900301818387803b15801561152d57600080fd5b505af1158015611541573d6000803e3d6000fd5b505060408051600088810b810b825285900b602082015281518994507f787d29ad64e9e02e1fb29fb54868408884d3969457c61da4943ec8d57e8ac01193509081900390910190a25050505050565b60055490565b6000818152600360205260408120546001600160a01b03166115f05760408051600160e51b62461bcd0281526020600482015260176024820152600080516020612c46833981519152604482015290519081900360640190fd5b6000828152600360209081526040808320548151600160e51b629032ff02815291516001600160a01b039091169283926312065fe09260048083019392829003018186803b15801561092e57600080fd5b60066020526000908152604090208054600182015460028301546003909301549192909184565b33600090815260016020526040812054819060ff166116bb57604051600160e51b62461bcd02815260040180806020018281038252602b815260200180612d33602b913960400191505060405180910390fd5b60008512156117145760408051600160e51b62461bcd02815260206004820152601260248201527f5945552043415520414d4f554e54203e20300000000000000000000000000000604482015290519081900360640190fd5b6000878152600360205260409020546001600160a01b03166117805760408051600160e51b62461bcd02815260206004820152601e60248201527f544149204b484f414e2043485559454e204b484f4e4720544f4e205441490000604482015290519081900360640190fd5b6000868152600360205260409020546001600160a01b03166117ec5760408051600160e51b62461bcd02815260206004820152601c60248201527f544149204b484f414e204e48414e204b484f4e4720544f4e2054414900000000604482015290519081900360640190fd5b600087815260036020908152604091829020548251600160e01b631865c57d02815292516001600160a01b03909116928392631865c57d92600480840193829003018186803b15801561183e57600080fd5b505afa158015611852573d6000803e3d6000fd5b505050506040513d602081101561186857600080fd5b505160000b600114806118e25750806001600160a01b0316631865c57d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118af57600080fd5b505afa1580156118c3573d6000803e3d6000fd5b505050506040513d60208110156118d957600080fd5b505160000b6002145b61192057604051600160e51b62461bcd02815260040180806020018281038252602c815260200180612c66602c913960400191505060405180910390fd5b85816001600160a01b03166312065fe06040518163ffffffff1660e01b815260040160206040518083038186803b15801561195a57600080fd5b505afa15801561196e573d6000803e3d6000fd5b505050506040513d602081101561198457600080fd5b505112156119dc5760408051600160e51b62461bcd02815260206004820152601560248201527f534f204455204b484f4e472044552043485559454e0000000000000000000000604482015290519081900360640190fd5b806001600160a01b03166315dae03e6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a1557600080fd5b505afa158015611a29573d6000803e3d6000fd5b505050506040513d6020811015611a3f57600080fd5b505160000b600114611a9b5760408051600160e51b62461bcd02815260206004820181905260248201527f5945552043415520544149204b484f414e2050484149204c41204c4f41492056604482015290519081900360640190fd5b600087815260036020908152604091829020548251600160e01b631865c57d02815292516001600160a01b03909116928392631865c57d92600480840193829003018186803b158015611aed57600080fd5b505afa158015611b01573d6000803e3d6000fd5b505050506040513d6020811015611b1757600080fd5b505160000b60011480611b915750806001600160a01b0316631865c57d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b5e57600080fd5b505afa158015611b72573d6000803e3d6000fd5b505050506040513d6020811015611b8857600080fd5b505160000b6002145b611bcf57604051600160e51b62461bcd02815260040180806020018281038252602a815260200180612cda602a913960400191505060405180910390fd5b816001600160a01b0316638c1fdf82886040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015611c1557600080fd5b505af1158015611c29573d6000803e3d6000fd5b50505050806001600160a01b03166304d4f624886040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015611c7357600080fd5b505af1158015611c87573d6000803e3d6000fd5b50506009805460018181019092557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af018d905560008d8152600a602090815260409091208e81559182018d9055600282018c9055600382018b90558951611cf894506004909201925089019061255e565b5060008a8152600a60209081526040808320600581018054948a900b60ff1660ff1990951694909417909355426006909301929092558151600160e51b629032ff02815291518a928c928e927f20244c6c280a8d1e1be518a3fc3acb8c46f303ad98dd9ec4c01baf9e2999f82e928d928d928d926001600160a01b038c16926312065fe092600480840193829003018186803b158015611d9757600080fd5b505afa158015611dab573d6000803e3d6000fd5b505050506040513d6020811015611dc157600080fd5b505160408051600160e51b629032ff02815290516001600160a01b038b16916312065fe0916004808301926020929190829003018186803b158015611e0557600080fd5b505afa158015611e19573d6000803e3d6000fd5b505050506040513d6020811015611e2f57600080fd5b81019080805190602001909291905050504260405180878152602001806020018660000b60000b8152602001858152602001848152602001838152602001828103825287818151815260200191508051906020019080838360005b83811015611ea2578181015183820152602001611e8a565b50505050905090810190601f168015611ecf5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a4816001600160a01b03166312065fe06040518163ffffffff1660e01b815260040160206040518083038186803b158015611f1a57600080fd5b505afa158015611f2e573d6000803e3d6000fd5b505050506040513d6020811015611f4457600080fd5b505160408051600160e51b629032ff02815290516001600160a01b038416916312065fe0916004808301926020929190829003018186803b158015611f8857600080fd5b505afa158015611f9c573d6000803e3d6000fd5b505050506040513d6020811015611fb257600080fd5b5051909b909a5098505050505050505050565b3360009081526001602052604090205460ff1661201657604051600160e51b62461bcd02815260040180806020018281038252602b815260200180612d33602b913960400191505060405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b3360009081526001602052604090205460ff1661208957604051600160e51b62461bcd02815260040180806020018281038252602b815260200180612d33602b913960400191505060405180910390fd5b60008281526003602052604090205482906001600160a01b03166120e55760408051600160e51b62461bcd0281526020600482015260176024820152600080516020612c46833981519152604482015290519081900360640190fd5b600083815260036020908152604091829020548251600160e01b631865c57d02815292516001600160a01b03909116928392631865c57d92600480840193829003018186803b15801561213757600080fd5b505afa15801561214b573d6000803e3d6000fd5b505050506040513d602081101561216157600080fd5b505160000b600114806121db5750806001600160a01b0316631865c57d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156121a857600080fd5b505afa1580156121bc573d6000803e3d6000fd5b505050506040513d60208110156121d257600080fd5b505160000b6002145b61221957604051600160e51b62461bcd028152600401808060200182810382526025815260200180612c926025913960400191505060405180910390fd5b806001600160a01b03166304d4f624846040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561225f57600080fd5b505af1158015612273573d6000803e3d6000fd5b50506007805460018181019092557fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688018890556000888152600860209081526040918290208a81559283018990556002830188905542600390930183905581518881529081019290925280518894508993507f2bda1f3aff897895cbea7f906b2e41ef99d39163a7b36af5782b8b718ed7e4569281900390910190a35050505050565b6009818154811061096f57fe5b60095490565b600061233361242d565b905090565b6000546001600160a01b0316331461238457604051600160e51b62461bcd028152600401808060200182810382526023815260200180612cb76023913960400191505060405180910390fd5b60005b81518110156123b4576123ac82828151811061239f57fe5b6020026020010151610980565b600101612387565b507f3b0686a3c64982476da002e36939997a11d9ef748420920b111c3ba5d2e9784f816040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156124175781810151838201526020016123ff565b505050509050019250505060405180910390a150565b60025490565b6000546001600160a01b0316331461247f57604051600160e51b62461bcd028152600401808060200182810382526023815260200180612cb76023913960400191505060405180910390fd5b60005b60045481101561252c576000600360006004848154811061249f57fe5b6000918252602080832090910154835282019290925260409081018220548151600160e01b63a6f9dae10281526001600160a01b0387811660048301529251929091169350839263a6f9dae19260248084019382900301818387803b15801561250757600080fd5b505af115801561251b573d6000803e3d6000fd5b505060019093019250612482915050565b5050565b60045490565b6003602052600090815260409020546001600160a01b031681565b61064f806125f783390190565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061259f57805160ff19168380011785556125cc565b828001600101855582156125cc579182015b828111156125cc5782518255916020019190600101906125b1565b506125d89291506125dc565b5090565b610a3991905b808211156125d857600081556001016125e256fe608060405234801561001057600080fd5b5060405160408061064f8339810180604052604081101561003057600080fd5b508051602090910151600080546001600160a01b03191633178155600392909255600580549190920b60ff166101000261ff00199091161790556105d6806100796000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063624cd31711610071578063624cd3171461016157806369c8374314610181578063893d20e81461019e5780638c1fdf82146101c2578063a6f9dae1146101df578063e45ab73314610205576100b4565b806304d4f624146100b95780630d3b2b6f146100d857806312065fe0146100fe57806315dae03e146101185780631865c57d146101395780631fed9efb14610141575b600080fd5b6100d6600480360360208110156100cf57600080fd5b5035610226565b005b6100d6600480360360208110156100ee57600080fd5b50356001600160a01b031661027d565b610106610332565b60408051918252519081900360200190f35b610120610338565b60408051600092830b90920b8252519081900360200190f35b610120610346565b6100d66004803603602081101561015757600080fd5b503560000b61034f565b6100d66004803603602081101561017757600080fd5b503560000b6103b6565b6100d66004803603602081101561019757600080fd5b5035610422565b6101a661047a565b604080516001600160a01b039092168252519081900360200190f35b6100d6600480360360208110156101d857600080fd5b5035610489565b6100d6600480360360208110156101f557600080fd5b50356001600160a01b03166104e3565b61020d610556565b60408051600192830b90920b8252519081900360200190f35b6000546001600160a01b0316331461027257604051600160e51b62461bcd02815260040180806020018281038252602381526020018061055d6023913960400191505060405180910390fd5b600480549091019055565b3360009081526001602052604090205460ff166102ce57604051600160e51b62461bcd02815260040180806020018281038252602b815260200180610580602b913960400191505060405180910390fd5b6001600160a01b031660008181526001602081905260408220805460ff1916821790556002805491820181559091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319169091179055565b60045490565b600554610100900460000b90565b60055460000b90565b6000546001600160a01b0316331461039b57604051600160e51b62461bcd02815260040180806020018281038252602381526020018061055d6023913960400191505060405180910390fd5b6005805460009290920b60ff1660ff19909216919091179055565b6000546001600160a01b0316331461040257604051600160e51b62461bcd02815260040180806020018281038252602381526020018061055d6023913960400191505060405180910390fd5b6005805460009290920b60ff166101000261ff0019909216919091179055565b6000546001600160a01b0316331461046e57604051600160e51b62461bcd02815260040180806020018281038252602381526020018061055d6023913960400191505060405180910390fd5b60048054919091039055565b6000546001600160a01b031690565b6000546001600160a01b031633146104d557604051600160e51b62461bcd02815260040180806020018281038252602381526020018061055d6023913960400191505060405180910390fd5b600454811261046e57600080fd5b3360009081526001602052604090205460ff1661053457604051600160e51b62461bcd02815260040180806020018281038252602b815260200180610580602b913960400191505060405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6002549056fe434849204f574e455220434f4e5452414354204d4f492044554f4320474f492048414d4348492043414320414343204554482044412044414e47204b59204d4f4920474f492044554f432048414da165627a7a72305820ee866f8eb32d05fa9fc7984e9333972d2a90f11b514c2ed8e6b33d2ad604fdce0029544149204b484f414e204b484f4e4720544f4e205441490000000000000000005945552043415520544149204b484f414e2043485559454e204f205452414e472054484149204143544956455945552043415520544149204b484f414e204f205452414e47205448414920414354495645434849204f574e455220434f4e5452414354204d4f492044554f4320474f492048414d5945552043415520544149204b484f414e204e48414e204f205452414e47205448414920414354495645544149204b484f414e204d554f4e2054414f204c41492050484149204f205452414e47205448414920434c4f5345444348492043414320414343204554482044412044414e47204b59204d4f4920474f492044554f432048414da165627a7a72305820e1cac7ae1e52d1daf42939dd820c6e5f708dcda2213b3258fe0c29cf9a62139c0029`

// DeployBusiness deploys a new Ethereum contract, binding an instance of Business to it.
func DeployBusiness(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Business, error) {
	parsed, err := abi.JSON(strings.NewReader(BusinessABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BusinessBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Business{BusinessCaller: BusinessCaller{contract: contract}, BusinessTransactor: BusinessTransactor{contract: contract}, BusinessFilterer: BusinessFilterer{contract: contract}}, nil
}

// Business is an auto generated Go binding around an Ethereum contract.
type Business struct {
	BusinessCaller     // Read-only binding to the contract
	BusinessTransactor // Write-only binding to the contract
	BusinessFilterer   // Log filterer for contract events
}

// BusinessCaller is an auto generated read-only Go binding around an Ethereum contract.
type BusinessCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BusinessTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BusinessTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BusinessFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BusinessFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BusinessSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BusinessSession struct {
	Contract     *Business         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BusinessCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BusinessCallerSession struct {
	Contract *BusinessCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// BusinessTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BusinessTransactorSession struct {
	Contract     *BusinessTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// BusinessRaw is an auto generated low-level Go binding around an Ethereum contract.
type BusinessRaw struct {
	Contract *Business // Generic contract binding to access the raw methods on
}

// BusinessCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BusinessCallerRaw struct {
	Contract *BusinessCaller // Generic read-only contract binding to access the raw methods on
}

// BusinessTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BusinessTransactorRaw struct {
	Contract *BusinessTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBusiness creates a new instance of Business, bound to a specific deployed contract.
func NewBusiness(address common.Address, backend bind.ContractBackend) (*Business, error) {
	contract, err := bindBusiness(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Business{BusinessCaller: BusinessCaller{contract: contract}, BusinessTransactor: BusinessTransactor{contract: contract}, BusinessFilterer: BusinessFilterer{contract: contract}}, nil
}

// NewBusinessCaller creates a new read-only instance of Business, bound to a specific deployed contract.
func NewBusinessCaller(address common.Address, caller bind.ContractCaller) (*BusinessCaller, error) {
	contract, err := bindBusiness(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BusinessCaller{contract: contract}, nil
}

// NewBusinessTransactor creates a new write-only instance of Business, bound to a specific deployed contract.
func NewBusinessTransactor(address common.Address, transactor bind.ContractTransactor) (*BusinessTransactor, error) {
	contract, err := bindBusiness(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BusinessTransactor{contract: contract}, nil
}

// NewBusinessFilterer creates a new log filterer instance of Business, bound to a specific deployed contract.
func NewBusinessFilterer(address common.Address, filterer bind.ContractFilterer) (*BusinessFilterer, error) {
	contract, err := bindBusiness(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BusinessFilterer{contract: contract}, nil
}

// bindBusiness binds a generic wrapper to an already deployed contract.
func bindBusiness(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BusinessABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Business *BusinessRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Business.Contract.BusinessCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Business *BusinessRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Business.Contract.BusinessTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Business *BusinessRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Business.Contract.BusinessTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Business *BusinessCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Business.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Business *BusinessTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Business.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Business *BusinessTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Business.Contract.contract.Transact(opts, method, params...)
}

// CreditIdx is a free data retrieval call binding the contract method 0x735677c8.
//
// Solidity: function creditIdx(uint256 ) constant returns(bytes32)
func (_Business *BusinessCaller) CreditIdx(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Business.contract.Call(opts, out, "creditIdx", arg0)
	return *ret0, err
}

// CreditIdx is a free data retrieval call binding the contract method 0x735677c8.
//
// Solidity: function creditIdx(uint256 ) constant returns(bytes32)
func (_Business *BusinessSession) CreditIdx(arg0 *big.Int) ([32]byte, error) {
	return _Business.Contract.CreditIdx(&_Business.CallOpts, arg0)
}

// CreditIdx is a free data retrieval call binding the contract method 0x735677c8.
//
// Solidity: function creditIdx(uint256 ) constant returns(bytes32)
func (_Business *BusinessCallerSession) CreditIdx(arg0 *big.Int) ([32]byte, error) {
	return _Business.Contract.CreditIdx(&_Business.CallOpts, arg0)
}

// Credits is a free data retrieval call binding the contract method 0x42997913.
//
// Solidity: function credits(bytes32 ) constant returns(bytes32 txRef, bytes32 stashName, int256 amount, uint256 timestamp)
func (_Business *BusinessCaller) Credits(opts *bind.CallOpts, arg0 [32]byte) (struct {
	TxRef     [32]byte
	StashName [32]byte
	Amount    *big.Int
	Timestamp *big.Int
}, error) {
	ret := new(struct {
		TxRef     [32]byte
		StashName [32]byte
		Amount    *big.Int
		Timestamp *big.Int
	})
	out := ret
	err := _Business.contract.Call(opts, out, "credits", arg0)
	return *ret, err
}

// Credits is a free data retrieval call binding the contract method 0x42997913.
//
// Solidity: function credits(bytes32 ) constant returns(bytes32 txRef, bytes32 stashName, int256 amount, uint256 timestamp)
func (_Business *BusinessSession) Credits(arg0 [32]byte) (struct {
	TxRef     [32]byte
	StashName [32]byte
	Amount    *big.Int
	Timestamp *big.Int
}, error) {
	return _Business.Contract.Credits(&_Business.CallOpts, arg0)
}

// Credits is a free data retrieval call binding the contract method 0x42997913.
//
// Solidity: function credits(bytes32 ) constant returns(bytes32 txRef, bytes32 stashName, int256 amount, uint256 timestamp)
func (_Business *BusinessCallerSession) Credits(arg0 [32]byte) (struct {
	TxRef     [32]byte
	StashName [32]byte
	Amount    *big.Int
	Timestamp *big.Int
}, error) {
	return _Business.Contract.Credits(&_Business.CallOpts, arg0)
}

// DebitIdx is a free data retrieval call binding the contract method 0x203aa89c.
//
// Solidity: function debitIdx(uint256 ) constant returns(bytes32)
func (_Business *BusinessCaller) DebitIdx(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Business.contract.Call(opts, out, "debitIdx", arg0)
	return *ret0, err
}

// DebitIdx is a free data retrieval call binding the contract method 0x203aa89c.
//
// Solidity: function debitIdx(uint256 ) constant returns(bytes32)
func (_Business *BusinessSession) DebitIdx(arg0 *big.Int) ([32]byte, error) {
	return _Business.Contract.DebitIdx(&_Business.CallOpts, arg0)
}

// DebitIdx is a free data retrieval call binding the contract method 0x203aa89c.
//
// Solidity: function debitIdx(uint256 ) constant returns(bytes32)
func (_Business *BusinessCallerSession) DebitIdx(arg0 *big.Int) ([32]byte, error) {
	return _Business.Contract.DebitIdx(&_Business.CallOpts, arg0)
}

// Debits is a free data retrieval call binding the contract method 0xa2cffc96.
//
// Solidity: function debits(bytes32 ) constant returns(bytes32 txRef, bytes32 stashName, int256 amount, uint256 timestamp)
func (_Business *BusinessCaller) Debits(opts *bind.CallOpts, arg0 [32]byte) (struct {
	TxRef     [32]byte
	StashName [32]byte
	Amount    *big.Int
	Timestamp *big.Int
}, error) {
	ret := new(struct {
		TxRef     [32]byte
		StashName [32]byte
		Amount    *big.Int
		Timestamp *big.Int
	})
	out := ret
	err := _Business.contract.Call(opts, out, "debits", arg0)
	return *ret, err
}

// Debits is a free data retrieval call binding the contract method 0xa2cffc96.
//
// Solidity: function debits(bytes32 ) constant returns(bytes32 txRef, bytes32 stashName, int256 amount, uint256 timestamp)
func (_Business *BusinessSession) Debits(arg0 [32]byte) (struct {
	TxRef     [32]byte
	StashName [32]byte
	Amount    *big.Int
	Timestamp *big.Int
}, error) {
	return _Business.Contract.Debits(&_Business.CallOpts, arg0)
}

// Debits is a free data retrieval call binding the contract method 0xa2cffc96.
//
// Solidity: function debits(bytes32 ) constant returns(bytes32 txRef, bytes32 stashName, int256 amount, uint256 timestamp)
func (_Business *BusinessCallerSession) Debits(arg0 [32]byte) (struct {
	TxRef     [32]byte
	StashName [32]byte
	Amount    *big.Int
	Timestamp *big.Int
}, error) {
	return _Business.Contract.Debits(&_Business.CallOpts, arg0)
}

// GetBalance is a free data retrieval call binding the contract method 0x8e739461.
//
// Solidity: function getBalance(bytes32 _stashName) constant returns(int256)
func (_Business *BusinessCaller) GetBalance(opts *bind.CallOpts, _stashName [32]byte) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Business.contract.Call(opts, out, "getBalance", _stashName)
	return *ret0, err
}

// GetBalance is a free data retrieval call binding the contract method 0x8e739461.
//
// Solidity: function getBalance(bytes32 _stashName) constant returns(int256)
func (_Business *BusinessSession) GetBalance(_stashName [32]byte) (*big.Int, error) {
	return _Business.Contract.GetBalance(&_Business.CallOpts, _stashName)
}

// GetBalance is a free data retrieval call binding the contract method 0x8e739461.
//
// Solidity: function getBalance(bytes32 _stashName) constant returns(int256)
func (_Business *BusinessCallerSession) GetBalance(_stashName [32]byte) (*big.Int, error) {
	return _Business.Contract.GetBalance(&_Business.CallOpts, _stashName)
}

// GetCreditHistoryLength is a free data retrieval call binding the contract method 0x1d74f2e2.
//
// Solidity: function getCreditHistoryLength() constant returns(uint256)
func (_Business *BusinessCaller) GetCreditHistoryLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Business.contract.Call(opts, out, "getCreditHistoryLength")
	return *ret0, err
}

// GetCreditHistoryLength is a free data retrieval call binding the contract method 0x1d74f2e2.
//
// Solidity: function getCreditHistoryLength() constant returns(uint256)
func (_Business *BusinessSession) GetCreditHistoryLength() (*big.Int, error) {
	return _Business.Contract.GetCreditHistoryLength(&_Business.CallOpts)
}

// GetCreditHistoryLength is a free data retrieval call binding the contract method 0x1d74f2e2.
//
// Solidity: function getCreditHistoryLength() constant returns(uint256)
func (_Business *BusinessCallerSession) GetCreditHistoryLength() (*big.Int, error) {
	return _Business.Contract.GetCreditHistoryLength(&_Business.CallOpts)
}

// GetDebitHistoryLength is a free data retrieval call binding the contract method 0x8d7a194a.
//
// Solidity: function getDebitHistoryLength() constant returns(uint256)
func (_Business *BusinessCaller) GetDebitHistoryLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Business.contract.Call(opts, out, "getDebitHistoryLength")
	return *ret0, err
}

// GetDebitHistoryLength is a free data retrieval call binding the contract method 0x8d7a194a.
//
// Solidity: function getDebitHistoryLength() constant returns(uint256)
func (_Business *BusinessSession) GetDebitHistoryLength() (*big.Int, error) {
	return _Business.Contract.GetDebitHistoryLength(&_Business.CallOpts)
}

// GetDebitHistoryLength is a free data retrieval call binding the contract method 0x8d7a194a.
//
// Solidity: function getDebitHistoryLength() constant returns(uint256)
func (_Business *BusinessCallerSession) GetDebitHistoryLength() (*big.Int, error) {
	return _Business.Contract.GetDebitHistoryLength(&_Business.CallOpts)
}

// GetMemberApiIdxLenght is a free data retrieval call binding the contract method 0xe45ab733.
//
// Solidity: function getMemberApiIdxLenght() constant returns(int16)
func (_Business *BusinessCaller) GetMemberApiIdxLenght(opts *bind.CallOpts) (int16, error) {
	var (
		ret0 = new(int16)
	)
	out := ret0
	err := _Business.contract.Call(opts, out, "getMemberApiIdxLenght")
	return *ret0, err
}

// GetMemberApiIdxLenght is a free data retrieval call binding the contract method 0xe45ab733.
//
// Solidity: function getMemberApiIdxLenght() constant returns(int16)
func (_Business *BusinessSession) GetMemberApiIdxLenght() (int16, error) {
	return _Business.Contract.GetMemberApiIdxLenght(&_Business.CallOpts)
}

// GetMemberApiIdxLenght is a free data retrieval call binding the contract method 0xe45ab733.
//
// Solidity: function getMemberApiIdxLenght() constant returns(int16)
func (_Business *BusinessCallerSession) GetMemberApiIdxLenght() (int16, error) {
	return _Business.Contract.GetMemberApiIdxLenght(&_Business.CallOpts)
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() constant returns(address)
func (_Business *BusinessCaller) GetOwner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Business.contract.Call(opts, out, "getOwner")
	return *ret0, err
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() constant returns(address)
func (_Business *BusinessSession) GetOwner() (common.Address, error) {
	return _Business.Contract.GetOwner(&_Business.CallOpts)
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() constant returns(address)
func (_Business *BusinessCallerSession) GetOwner() (common.Address, error) {
	return _Business.Contract.GetOwner(&_Business.CallOpts)
}

// GetRegistedAccEthLength is a free data retrieval call binding the contract method 0xdf646612.
//
// Solidity: function getRegistedAccEthLength() constant returns(int16)
func (_Business *BusinessCaller) GetRegistedAccEthLength(opts *bind.CallOpts) (int16, error) {
	var (
		ret0 = new(int16)
	)
	out := ret0
	err := _Business.contract.Call(opts, out, "getRegistedAccEthLength")
	return *ret0, err
}

// GetRegistedAccEthLength is a free data retrieval call binding the contract method 0xdf646612.
//
// Solidity: function getRegistedAccEthLength() constant returns(int16)
func (_Business *BusinessSession) GetRegistedAccEthLength() (int16, error) {
	return _Business.Contract.GetRegistedAccEthLength(&_Business.CallOpts)
}

// GetRegistedAccEthLength is a free data retrieval call binding the contract method 0xdf646612.
//
// Solidity: function getRegistedAccEthLength() constant returns(int16)
func (_Business *BusinessCallerSession) GetRegistedAccEthLength() (int16, error) {
	return _Business.Contract.GetRegistedAccEthLength(&_Business.CallOpts)
}

// GetStashNamesLenght is a free data retrieval call binding the contract method 0xee9a5812.
//
// Solidity: function getStashNamesLenght() constant returns(int256)
func (_Business *BusinessCaller) GetStashNamesLenght(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Business.contract.Call(opts, out, "getStashNamesLenght")
	return *ret0, err
}

// GetStashNamesLenght is a free data retrieval call binding the contract method 0xee9a5812.
//
// Solidity: function getStashNamesLenght() constant returns(int256)
func (_Business *BusinessSession) GetStashNamesLenght() (*big.Int, error) {
	return _Business.Contract.GetStashNamesLenght(&_Business.CallOpts)
}

// GetStashNamesLenght is a free data retrieval call binding the contract method 0xee9a5812.
//
// Solidity: function getStashNamesLenght() constant returns(int256)
func (_Business *BusinessCallerSession) GetStashNamesLenght() (*big.Int, error) {
	return _Business.Contract.GetStashNamesLenght(&_Business.CallOpts)
}

// GetState is a free data retrieval call binding the contract method 0x09648a9d.
//
// Solidity: function getState(bytes32 _stashName) constant returns(int8)
func (_Business *BusinessCaller) GetState(opts *bind.CallOpts, _stashName [32]byte) (int8, error) {
	var (
		ret0 = new(int8)
	)
	out := ret0
	err := _Business.contract.Call(opts, out, "getState", _stashName)
	return *ret0, err
}

// GetState is a free data retrieval call binding the contract method 0x09648a9d.
//
// Solidity: function getState(bytes32 _stashName) constant returns(int8)
func (_Business *BusinessSession) GetState(_stashName [32]byte) (int8, error) {
	return _Business.Contract.GetState(&_Business.CallOpts, _stashName)
}

// GetState is a free data retrieval call binding the contract method 0x09648a9d.
//
// Solidity: function getState(bytes32 _stashName) constant returns(int8)
func (_Business *BusinessCallerSession) GetState(_stashName [32]byte) (int8, error) {
	return _Business.Contract.GetState(&_Business.CallOpts, _stashName)
}

// GetTransferHistoryLength is a free data retrieval call binding the contract method 0xd236e1ba.
//
// Solidity: function getTransferHistoryLength() constant returns(uint256)
func (_Business *BusinessCaller) GetTransferHistoryLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Business.contract.Call(opts, out, "getTransferHistoryLength")
	return *ret0, err
}

// GetTransferHistoryLength is a free data retrieval call binding the contract method 0xd236e1ba.
//
// Solidity: function getTransferHistoryLength() constant returns(uint256)
func (_Business *BusinessSession) GetTransferHistoryLength() (*big.Int, error) {
	return _Business.Contract.GetTransferHistoryLength(&_Business.CallOpts)
}

// GetTransferHistoryLength is a free data retrieval call binding the contract method 0xd236e1ba.
//
// Solidity: function getTransferHistoryLength() constant returns(uint256)
func (_Business *BusinessCallerSession) GetTransferHistoryLength() (*big.Int, error) {
	return _Business.Contract.GetTransferHistoryLength(&_Business.CallOpts)
}

// GetType is a free data retrieval call binding the contract method 0x7f2aeea4.
//
// Solidity: function getType(bytes32 _stashName) constant returns(int8)
func (_Business *BusinessCaller) GetType(opts *bind.CallOpts, _stashName [32]byte) (int8, error) {
	var (
		ret0 = new(int8)
	)
	out := ret0
	err := _Business.contract.Call(opts, out, "getType", _stashName)
	return *ret0, err
}

// GetType is a free data retrieval call binding the contract method 0x7f2aeea4.
//
// Solidity: function getType(bytes32 _stashName) constant returns(int8)
func (_Business *BusinessSession) GetType(_stashName [32]byte) (int8, error) {
	return _Business.Contract.GetType(&_Business.CallOpts, _stashName)
}

// GetType is a free data retrieval call binding the contract method 0x7f2aeea4.
//
// Solidity: function getType(bytes32 _stashName) constant returns(int8)
func (_Business *BusinessCallerSession) GetType(_stashName [32]byte) (int8, error) {
	return _Business.Contract.GetType(&_Business.CallOpts, _stashName)
}

// StashNames is a free data retrieval call binding the contract method 0x0ae94616.
//
// Solidity: function stashNames(uint256 ) constant returns(bytes32)
func (_Business *BusinessCaller) StashNames(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Business.contract.Call(opts, out, "stashNames", arg0)
	return *ret0, err
}

// StashNames is a free data retrieval call binding the contract method 0x0ae94616.
//
// Solidity: function stashNames(uint256 ) constant returns(bytes32)
func (_Business *BusinessSession) StashNames(arg0 *big.Int) ([32]byte, error) {
	return _Business.Contract.StashNames(&_Business.CallOpts, arg0)
}

// StashNames is a free data retrieval call binding the contract method 0x0ae94616.
//
// Solidity: function stashNames(uint256 ) constant returns(bytes32)
func (_Business *BusinessCallerSession) StashNames(arg0 *big.Int) ([32]byte, error) {
	return _Business.Contract.StashNames(&_Business.CallOpts, arg0)
}

// StashRegistry is a free data retrieval call binding the contract method 0xfb6cb61f.
//
// Solidity: function stashRegistry(bytes32 ) constant returns(address)
func (_Business *BusinessCaller) StashRegistry(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Business.contract.Call(opts, out, "stashRegistry", arg0)
	return *ret0, err
}

// StashRegistry is a free data retrieval call binding the contract method 0xfb6cb61f.
//
// Solidity: function stashRegistry(bytes32 ) constant returns(address)
func (_Business *BusinessSession) StashRegistry(arg0 [32]byte) (common.Address, error) {
	return _Business.Contract.StashRegistry(&_Business.CallOpts, arg0)
}

// StashRegistry is a free data retrieval call binding the contract method 0xfb6cb61f.
//
// Solidity: function stashRegistry(bytes32 ) constant returns(address)
func (_Business *BusinessCallerSession) StashRegistry(arg0 [32]byte) (common.Address, error) {
	return _Business.Contract.StashRegistry(&_Business.CallOpts, arg0)
}

// StringTobytes is a free data retrieval call binding the contract method 0xbc6d0577.
//
// Solidity: function string_tobytes(string s) constant returns(bytes)
func (_Business *BusinessCaller) StringTobytes(opts *bind.CallOpts, s string) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _Business.contract.Call(opts, out, "string_tobytes", s)
	return *ret0, err
}

// StringTobytes is a free data retrieval call binding the contract method 0xbc6d0577.
//
// Solidity: function string_tobytes(string s) constant returns(bytes)
func (_Business *BusinessSession) StringTobytes(s string) ([]byte, error) {
	return _Business.Contract.StringTobytes(&_Business.CallOpts, s)
}

// StringTobytes is a free data retrieval call binding the contract method 0xbc6d0577.
//
// Solidity: function string_tobytes(string s) constant returns(bytes)
func (_Business *BusinessCallerSession) StringTobytes(s string) ([]byte, error) {
	return _Business.Contract.StringTobytes(&_Business.CallOpts, s)
}

// TransferIdx is a free data retrieval call binding the contract method 0xc83fe142.
//
// Solidity: function transferIdx(uint256 ) constant returns(bytes32)
func (_Business *BusinessCaller) TransferIdx(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Business.contract.Call(opts, out, "transferIdx", arg0)
	return *ret0, err
}

// TransferIdx is a free data retrieval call binding the contract method 0xc83fe142.
//
// Solidity: function transferIdx(uint256 ) constant returns(bytes32)
func (_Business *BusinessSession) TransferIdx(arg0 *big.Int) ([32]byte, error) {
	return _Business.Contract.TransferIdx(&_Business.CallOpts, arg0)
}

// TransferIdx is a free data retrieval call binding the contract method 0xc83fe142.
//
// Solidity: function transferIdx(uint256 ) constant returns(bytes32)
func (_Business *BusinessCallerSession) TransferIdx(arg0 *big.Int) ([32]byte, error) {
	return _Business.Contract.TransferIdx(&_Business.CallOpts, arg0)
}

// Transfers is a free data retrieval call binding the contract method 0x3c64f04b.
//
// Solidity: function transfers(bytes32 ) constant returns(bytes32 txRef, bytes32 sender, bytes32 receiver, int256 amount, string note, int8 txType, uint256 timestamp)
func (_Business *BusinessCaller) Transfers(opts *bind.CallOpts, arg0 [32]byte) (struct {
	TxRef     [32]byte
	Sender    [32]byte
	Receiver  [32]byte
	Amount    *big.Int
	Note      string
	TxType    int8
	Timestamp *big.Int
}, error) {
	ret := new(struct {
		TxRef     [32]byte
		Sender    [32]byte
		Receiver  [32]byte
		Amount    *big.Int
		Note      string
		TxType    int8
		Timestamp *big.Int
	})
	out := ret
	err := _Business.contract.Call(opts, out, "transfers", arg0)
	return *ret, err
}

// Transfers is a free data retrieval call binding the contract method 0x3c64f04b.
//
// Solidity: function transfers(bytes32 ) constant returns(bytes32 txRef, bytes32 sender, bytes32 receiver, int256 amount, string note, int8 txType, uint256 timestamp)
func (_Business *BusinessSession) Transfers(arg0 [32]byte) (struct {
	TxRef     [32]byte
	Sender    [32]byte
	Receiver  [32]byte
	Amount    *big.Int
	Note      string
	TxType    int8
	Timestamp *big.Int
}, error) {
	return _Business.Contract.Transfers(&_Business.CallOpts, arg0)
}

// Transfers is a free data retrieval call binding the contract method 0x3c64f04b.
//
// Solidity: function transfers(bytes32 ) constant returns(bytes32 txRef, bytes32 sender, bytes32 receiver, int256 amount, string note, int8 txType, uint256 timestamp)
func (_Business *BusinessCallerSession) Transfers(arg0 [32]byte) (struct {
	TxRef     [32]byte
	Sender    [32]byte
	Receiver  [32]byte
	Amount    *big.Int
	Note      string
	TxType    int8
	Timestamp *big.Int
}, error) {
	return _Business.Contract.Transfers(&_Business.CallOpts, arg0)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0xa6f9dae1.
//
// Solidity: function changeOwner(address _newOwner) returns()
func (_Business *BusinessTransactor) ChangeOwner(opts *bind.TransactOpts, _newOwner common.Address) (*types.Transaction, error) {
	return _Business.contract.Transact(opts, "changeOwner", _newOwner)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0xa6f9dae1.
//
// Solidity: function changeOwner(address _newOwner) returns()
func (_Business *BusinessSession) ChangeOwner(_newOwner common.Address) (*types.Transaction, error) {
	return _Business.Contract.ChangeOwner(&_Business.TransactOpts, _newOwner)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0xa6f9dae1.
//
// Solidity: function changeOwner(address _newOwner) returns()
func (_Business *BusinessTransactorSession) ChangeOwner(_newOwner common.Address) (*types.Transaction, error) {
	return _Business.Contract.ChangeOwner(&_Business.TransactOpts, _newOwner)
}

// ChangeOwnerAllStash is a paid mutator transaction binding the contract method 0xeae5180e.
//
// Solidity: function changeOwnerAllStash(address _newOwner) returns()
func (_Business *BusinessTransactor) ChangeOwnerAllStash(opts *bind.TransactOpts, _newOwner common.Address) (*types.Transaction, error) {
	return _Business.contract.Transact(opts, "changeOwnerAllStash", _newOwner)
}

// ChangeOwnerAllStash is a paid mutator transaction binding the contract method 0xeae5180e.
//
// Solidity: function changeOwnerAllStash(address _newOwner) returns()
func (_Business *BusinessSession) ChangeOwnerAllStash(_newOwner common.Address) (*types.Transaction, error) {
	return _Business.Contract.ChangeOwnerAllStash(&_Business.TransactOpts, _newOwner)
}

// ChangeOwnerAllStash is a paid mutator transaction binding the contract method 0xeae5180e.
//
// Solidity: function changeOwnerAllStash(address _newOwner) returns()
func (_Business *BusinessTransactorSession) ChangeOwnerAllStash(_newOwner common.Address) (*types.Transaction, error) {
	return _Business.Contract.ChangeOwnerAllStash(&_Business.TransactOpts, _newOwner)
}

// CreateStash is a paid mutator transaction binding the contract method 0x7e53308a.
//
// Solidity: function createStash(bytes32 _stashName, int8 _typeState) returns()
func (_Business *BusinessTransactor) CreateStash(opts *bind.TransactOpts, _stashName [32]byte, _typeState int8) (*types.Transaction, error) {
	return _Business.contract.Transact(opts, "createStash", _stashName, _typeState)
}

// CreateStash is a paid mutator transaction binding the contract method 0x7e53308a.
//
// Solidity: function createStash(bytes32 _stashName, int8 _typeState) returns()
func (_Business *BusinessSession) CreateStash(_stashName [32]byte, _typeState int8) (*types.Transaction, error) {
	return _Business.Contract.CreateStash(&_Business.TransactOpts, _stashName, _typeState)
}

// CreateStash is a paid mutator transaction binding the contract method 0x7e53308a.
//
// Solidity: function createStash(bytes32 _stashName, int8 _typeState) returns()
func (_Business *BusinessTransactorSession) CreateStash(_stashName [32]byte, _typeState int8) (*types.Transaction, error) {
	return _Business.Contract.CreateStash(&_Business.TransactOpts, _stashName, _typeState)
}

// Credit is a paid mutator transaction binding the contract method 0xb91f176e.
//
// Solidity: function credit(bytes32 _txRef, bytes32 _stashName, int256 _amount) returns()
func (_Business *BusinessTransactor) Credit(opts *bind.TransactOpts, _txRef [32]byte, _stashName [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _Business.contract.Transact(opts, "credit", _txRef, _stashName, _amount)
}

// Credit is a paid mutator transaction binding the contract method 0xb91f176e.
//
// Solidity: function credit(bytes32 _txRef, bytes32 _stashName, int256 _amount) returns()
func (_Business *BusinessSession) Credit(_txRef [32]byte, _stashName [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _Business.Contract.Credit(&_Business.TransactOpts, _txRef, _stashName, _amount)
}

// Credit is a paid mutator transaction binding the contract method 0xb91f176e.
//
// Solidity: function credit(bytes32 _txRef, bytes32 _stashName, int256 _amount) returns()
func (_Business *BusinessTransactorSession) Credit(_txRef [32]byte, _stashName [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _Business.Contract.Credit(&_Business.TransactOpts, _txRef, _stashName, _amount)
}

// Debit is a paid mutator transaction binding the contract method 0x4ea679e7.
//
// Solidity: function debit(bytes32 _txRef, bytes32 _stashName, int256 _amount) returns()
func (_Business *BusinessTransactor) Debit(opts *bind.TransactOpts, _txRef [32]byte, _stashName [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _Business.contract.Transact(opts, "debit", _txRef, _stashName, _amount)
}

// Debit is a paid mutator transaction binding the contract method 0x4ea679e7.
//
// Solidity: function debit(bytes32 _txRef, bytes32 _stashName, int256 _amount) returns()
func (_Business *BusinessSession) Debit(_txRef [32]byte, _stashName [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _Business.Contract.Debit(&_Business.TransactOpts, _txRef, _stashName, _amount)
}

// Debit is a paid mutator transaction binding the contract method 0x4ea679e7.
//
// Solidity: function debit(bytes32 _txRef, bytes32 _stashName, int256 _amount) returns()
func (_Business *BusinessTransactorSession) Debit(_txRef [32]byte, _stashName [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _Business.Contract.Debit(&_Business.TransactOpts, _txRef, _stashName, _amount)
}

// LoadStashRegistry is a paid mutator transaction binding the contract method 0x4e3d7de0.
//
// Solidity: function loadStashRegistry(bytes32 _stashName, address _stash) returns()
func (_Business *BusinessTransactor) LoadStashRegistry(opts *bind.TransactOpts, _stashName [32]byte, _stash common.Address) (*types.Transaction, error) {
	return _Business.contract.Transact(opts, "loadStashRegistry", _stashName, _stash)
}

// LoadStashRegistry is a paid mutator transaction binding the contract method 0x4e3d7de0.
//
// Solidity: function loadStashRegistry(bytes32 _stashName, address _stash) returns()
func (_Business *BusinessSession) LoadStashRegistry(_stashName [32]byte, _stash common.Address) (*types.Transaction, error) {
	return _Business.Contract.LoadStashRegistry(&_Business.TransactOpts, _stashName, _stash)
}

// LoadStashRegistry is a paid mutator transaction binding the contract method 0x4e3d7de0.
//
// Solidity: function loadStashRegistry(bytes32 _stashName, address _stash) returns()
func (_Business *BusinessTransactorSession) LoadStashRegistry(_stashName [32]byte, _stash common.Address) (*types.Transaction, error) {
	return _Business.Contract.LoadStashRegistry(&_Business.TransactOpts, _stashName, _stash)
}

// ReCreateStash is a paid mutator transaction binding the contract method 0x1e022e75.
//
// Solidity: function reCreateStash(bytes32 _stashName, int8 _typeState) returns()
func (_Business *BusinessTransactor) ReCreateStash(opts *bind.TransactOpts, _stashName [32]byte, _typeState int8) (*types.Transaction, error) {
	return _Business.contract.Transact(opts, "reCreateStash", _stashName, _typeState)
}

// ReCreateStash is a paid mutator transaction binding the contract method 0x1e022e75.
//
// Solidity: function reCreateStash(bytes32 _stashName, int8 _typeState) returns()
func (_Business *BusinessSession) ReCreateStash(_stashName [32]byte, _typeState int8) (*types.Transaction, error) {
	return _Business.Contract.ReCreateStash(&_Business.TransactOpts, _stashName, _typeState)
}

// ReCreateStash is a paid mutator transaction binding the contract method 0x1e022e75.
//
// Solidity: function reCreateStash(bytes32 _stashName, int8 _typeState) returns()
func (_Business *BusinessTransactorSession) ReCreateStash(_stashName [32]byte, _typeState int8) (*types.Transaction, error) {
	return _Business.Contract.ReCreateStash(&_Business.TransactOpts, _stashName, _typeState)
}

// RegisterAccETH is a paid mutator transaction binding the contract method 0xe1b8ff83.
//
// Solidity: function registerAccETH(address[] _listAcc) returns()
func (_Business *BusinessTransactor) RegisterAccETH(opts *bind.TransactOpts, _listAcc []common.Address) (*types.Transaction, error) {
	return _Business.contract.Transact(opts, "registerAccETH", _listAcc)
}

// RegisterAccETH is a paid mutator transaction binding the contract method 0xe1b8ff83.
//
// Solidity: function registerAccETH(address[] _listAcc) returns()
func (_Business *BusinessSession) RegisterAccETH(_listAcc []common.Address) (*types.Transaction, error) {
	return _Business.Contract.RegisterAccETH(&_Business.TransactOpts, _listAcc)
}

// RegisterAccETH is a paid mutator transaction binding the contract method 0xe1b8ff83.
//
// Solidity: function registerAccETH(address[] _listAcc) returns()
func (_Business *BusinessTransactorSession) RegisterAccETH(_listAcc []common.Address) (*types.Transaction, error) {
	return _Business.Contract.RegisterAccETH(&_Business.TransactOpts, _listAcc)
}

// RegisterMemberApi is a paid mutator transaction binding the contract method 0x0d3b2b6f.
//
// Solidity: function registerMemberApi(address _newMember) returns()
func (_Business *BusinessTransactor) RegisterMemberApi(opts *bind.TransactOpts, _newMember common.Address) (*types.Transaction, error) {
	return _Business.contract.Transact(opts, "registerMemberApi", _newMember)
}

// RegisterMemberApi is a paid mutator transaction binding the contract method 0x0d3b2b6f.
//
// Solidity: function registerMemberApi(address _newMember) returns()
func (_Business *BusinessSession) RegisterMemberApi(_newMember common.Address) (*types.Transaction, error) {
	return _Business.Contract.RegisterMemberApi(&_Business.TransactOpts, _newMember)
}

// RegisterMemberApi is a paid mutator transaction binding the contract method 0x0d3b2b6f.
//
// Solidity: function registerMemberApi(address _newMember) returns()
func (_Business *BusinessTransactorSession) RegisterMemberApi(_newMember common.Address) (*types.Transaction, error) {
	return _Business.Contract.RegisterMemberApi(&_Business.TransactOpts, _newMember)
}

// SetState is a paid mutator transaction binding the contract method 0x8b356a4d.
//
// Solidity: function setState(bytes32 _stashName, int8 _stashState) returns()
func (_Business *BusinessTransactor) SetState(opts *bind.TransactOpts, _stashName [32]byte, _stashState int8) (*types.Transaction, error) {
	return _Business.contract.Transact(opts, "setState", _stashName, _stashState)
}

// SetState is a paid mutator transaction binding the contract method 0x8b356a4d.
//
// Solidity: function setState(bytes32 _stashName, int8 _stashState) returns()
func (_Business *BusinessSession) SetState(_stashName [32]byte, _stashState int8) (*types.Transaction, error) {
	return _Business.Contract.SetState(&_Business.TransactOpts, _stashName, _stashState)
}

// SetState is a paid mutator transaction binding the contract method 0x8b356a4d.
//
// Solidity: function setState(bytes32 _stashName, int8 _stashState) returns()
func (_Business *BusinessTransactorSession) SetState(_stashName [32]byte, _stashState int8) (*types.Transaction, error) {
	return _Business.Contract.SetState(&_Business.TransactOpts, _stashName, _stashState)
}

// Transfer is a paid mutator transaction binding the contract method 0xa4642866.
//
// Solidity: function transfer(bytes32 _txRef, bytes32 _sender, bytes32 _receiver, int256 _amount, string _note, int8 _txType) returns(int256 sender_bal, int256 receiver_bal)
func (_Business *BusinessTransactor) Transfer(opts *bind.TransactOpts, _txRef [32]byte, _sender [32]byte, _receiver [32]byte, _amount *big.Int, _note string, _txType int8) (*types.Transaction, error) {
	return _Business.contract.Transact(opts, "transfer", _txRef, _sender, _receiver, _amount, _note, _txType)
}

// Transfer is a paid mutator transaction binding the contract method 0xa4642866.
//
// Solidity: function transfer(bytes32 _txRef, bytes32 _sender, bytes32 _receiver, int256 _amount, string _note, int8 _txType) returns(int256 sender_bal, int256 receiver_bal)
func (_Business *BusinessSession) Transfer(_txRef [32]byte, _sender [32]byte, _receiver [32]byte, _amount *big.Int, _note string, _txType int8) (*types.Transaction, error) {
	return _Business.Contract.Transfer(&_Business.TransactOpts, _txRef, _sender, _receiver, _amount, _note, _txType)
}

// Transfer is a paid mutator transaction binding the contract method 0xa4642866.
//
// Solidity: function transfer(bytes32 _txRef, bytes32 _sender, bytes32 _receiver, int256 _amount, string _note, int8 _txType) returns(int256 sender_bal, int256 receiver_bal)
func (_Business *BusinessTransactorSession) Transfer(_txRef [32]byte, _sender [32]byte, _receiver [32]byte, _amount *big.Int, _note string, _txType int8) (*types.Transaction, error) {
	return _Business.Contract.Transfer(&_Business.TransactOpts, _txRef, _sender, _receiver, _amount, _note, _txType)
}

// BusinessEventCreateStashIterator is returned from FilterEventCreateStash and is used to iterate over the raw logs and unpacked data for EventCreateStash events raised by the Business contract.
type BusinessEventCreateStashIterator struct {
	Event *BusinessEventCreateStash // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BusinessEventCreateStashIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BusinessEventCreateStash)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BusinessEventCreateStash)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BusinessEventCreateStashIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BusinessEventCreateStashIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BusinessEventCreateStash represents a EventCreateStash event raised by the Business contract.
type BusinessEventCreateStash struct {
	WalletCode    [32]byte
	WalletAddress common.Address
	WalletType    int8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterEventCreateStash is a free log retrieval operation binding the contract event 0x0cb60d28f723451a1bd65a935f5e1d7b4e708818cf6cc6c30ad742fd67531b00.
//
// Solidity: event event_createStash(bytes32 indexed wallet_code, address wallet_address, int8 wallet_type)
func (_Business *BusinessFilterer) FilterEventCreateStash(opts *bind.FilterOpts, wallet_code [][32]byte) (*BusinessEventCreateStashIterator, error) {

	var wallet_codeRule []interface{}
	for _, wallet_codeItem := range wallet_code {
		wallet_codeRule = append(wallet_codeRule, wallet_codeItem)
	}

	logs, sub, err := _Business.contract.FilterLogs(opts, "event_createStash", wallet_codeRule)
	if err != nil {
		return nil, err
	}
	return &BusinessEventCreateStashIterator{contract: _Business.contract, event: "event_createStash", logs: logs, sub: sub}, nil
}

// WatchEventCreateStash is a free log subscription operation binding the contract event 0x0cb60d28f723451a1bd65a935f5e1d7b4e708818cf6cc6c30ad742fd67531b00.
//
// Solidity: event event_createStash(bytes32 indexed wallet_code, address wallet_address, int8 wallet_type)
func (_Business *BusinessFilterer) WatchEventCreateStash(opts *bind.WatchOpts, sink chan<- *BusinessEventCreateStash, wallet_code [][32]byte) (event.Subscription, error) {

	var wallet_codeRule []interface{}
	for _, wallet_codeItem := range wallet_code {
		wallet_codeRule = append(wallet_codeRule, wallet_codeItem)
	}

	logs, sub, err := _Business.contract.WatchLogs(opts, "event_createStash", wallet_codeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BusinessEventCreateStash)
				if err := _Business.contract.UnpackLog(event, "event_createStash", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// BusinessEventCreditIterator is returned from FilterEventCredit and is used to iterate over the raw logs and unpacked data for EventCredit events raised by the Business contract.
type BusinessEventCreditIterator struct {
	Event *BusinessEventCredit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BusinessEventCreditIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BusinessEventCredit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BusinessEventCredit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BusinessEventCreditIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BusinessEventCreditIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BusinessEventCredit represents a EventCredit event raised by the Business contract.
type BusinessEventCredit struct {
	TxRef      [32]byte
	WalletCode [32]byte
	Amount     *big.Int
	Timestamp  *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterEventCredit is a free log retrieval operation binding the contract event 0x2bda1f3aff897895cbea7f906b2e41ef99d39163a7b36af5782b8b718ed7e456.
//
// Solidity: event event_credit(bytes32 indexed txRef, bytes32 indexed wallet_code, int256 amount, uint256 timestamp)
func (_Business *BusinessFilterer) FilterEventCredit(opts *bind.FilterOpts, txRef [][32]byte, wallet_code [][32]byte) (*BusinessEventCreditIterator, error) {

	var txRefRule []interface{}
	for _, txRefItem := range txRef {
		txRefRule = append(txRefRule, txRefItem)
	}
	var wallet_codeRule []interface{}
	for _, wallet_codeItem := range wallet_code {
		wallet_codeRule = append(wallet_codeRule, wallet_codeItem)
	}

	logs, sub, err := _Business.contract.FilterLogs(opts, "event_credit", txRefRule, wallet_codeRule)
	if err != nil {
		return nil, err
	}
	return &BusinessEventCreditIterator{contract: _Business.contract, event: "event_credit", logs: logs, sub: sub}, nil
}

// WatchEventCredit is a free log subscription operation binding the contract event 0x2bda1f3aff897895cbea7f906b2e41ef99d39163a7b36af5782b8b718ed7e456.
//
// Solidity: event event_credit(bytes32 indexed txRef, bytes32 indexed wallet_code, int256 amount, uint256 timestamp)
func (_Business *BusinessFilterer) WatchEventCredit(opts *bind.WatchOpts, sink chan<- *BusinessEventCredit, txRef [][32]byte, wallet_code [][32]byte) (event.Subscription, error) {

	var txRefRule []interface{}
	for _, txRefItem := range txRef {
		txRefRule = append(txRefRule, txRefItem)
	}
	var wallet_codeRule []interface{}
	for _, wallet_codeItem := range wallet_code {
		wallet_codeRule = append(wallet_codeRule, wallet_codeItem)
	}

	logs, sub, err := _Business.contract.WatchLogs(opts, "event_credit", txRefRule, wallet_codeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BusinessEventCredit)
				if err := _Business.contract.UnpackLog(event, "event_credit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// BusinessEventDebitIterator is returned from FilterEventDebit and is used to iterate over the raw logs and unpacked data for EventDebit events raised by the Business contract.
type BusinessEventDebitIterator struct {
	Event *BusinessEventDebit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BusinessEventDebitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BusinessEventDebit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BusinessEventDebit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BusinessEventDebitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BusinessEventDebitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BusinessEventDebit represents a EventDebit event raised by the Business contract.
type BusinessEventDebit struct {
	TxRef      [32]byte
	WalletCode [32]byte
	Amount     *big.Int
	Timestamp  *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterEventDebit is a free log retrieval operation binding the contract event 0x3e888fb580f7ba504d1d06b6af38e430c683d120af553208a48629dbd58bb0f8.
//
// Solidity: event event_debit(bytes32 indexed txRef, bytes32 indexed wallet_code, int256 amount, uint256 timestamp)
func (_Business *BusinessFilterer) FilterEventDebit(opts *bind.FilterOpts, txRef [][32]byte, wallet_code [][32]byte) (*BusinessEventDebitIterator, error) {

	var txRefRule []interface{}
	for _, txRefItem := range txRef {
		txRefRule = append(txRefRule, txRefItem)
	}
	var wallet_codeRule []interface{}
	for _, wallet_codeItem := range wallet_code {
		wallet_codeRule = append(wallet_codeRule, wallet_codeItem)
	}

	logs, sub, err := _Business.contract.FilterLogs(opts, "event_debit", txRefRule, wallet_codeRule)
	if err != nil {
		return nil, err
	}
	return &BusinessEventDebitIterator{contract: _Business.contract, event: "event_debit", logs: logs, sub: sub}, nil
}

// WatchEventDebit is a free log subscription operation binding the contract event 0x3e888fb580f7ba504d1d06b6af38e430c683d120af553208a48629dbd58bb0f8.
//
// Solidity: event event_debit(bytes32 indexed txRef, bytes32 indexed wallet_code, int256 amount, uint256 timestamp)
func (_Business *BusinessFilterer) WatchEventDebit(opts *bind.WatchOpts, sink chan<- *BusinessEventDebit, txRef [][32]byte, wallet_code [][32]byte) (event.Subscription, error) {

	var txRefRule []interface{}
	for _, txRefItem := range txRef {
		txRefRule = append(txRefRule, txRefItem)
	}
	var wallet_codeRule []interface{}
	for _, wallet_codeItem := range wallet_code {
		wallet_codeRule = append(wallet_codeRule, wallet_codeItem)
	}

	logs, sub, err := _Business.contract.WatchLogs(opts, "event_debit", txRefRule, wallet_codeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BusinessEventDebit)
				if err := _Business.contract.UnpackLog(event, "event_debit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// BusinessEventReCreateStashIterator is returned from FilterEventReCreateStash and is used to iterate over the raw logs and unpacked data for EventReCreateStash events raised by the Business contract.
type BusinessEventReCreateStashIterator struct {
	Event *BusinessEventReCreateStash // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BusinessEventReCreateStashIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BusinessEventReCreateStash)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BusinessEventReCreateStash)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BusinessEventReCreateStashIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BusinessEventReCreateStashIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BusinessEventReCreateStash represents a EventReCreateStash event raised by the Business contract.
type BusinessEventReCreateStash struct {
	WalletCode       [32]byte
	OldWalletAddress common.Address
	NewWalletAddress common.Address
	WalletType       int8
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterEventReCreateStash is a free log retrieval operation binding the contract event 0x8c8e3419f9e71366ada9d23ae8a8dba5229a20e91deb3cab00f419ea5b0480e8.
//
// Solidity: event event_reCreateStash(bytes32 indexed wallet_code, address old_wallet_address, address new_wallet_address, int8 wallet_type)
func (_Business *BusinessFilterer) FilterEventReCreateStash(opts *bind.FilterOpts, wallet_code [][32]byte) (*BusinessEventReCreateStashIterator, error) {

	var wallet_codeRule []interface{}
	for _, wallet_codeItem := range wallet_code {
		wallet_codeRule = append(wallet_codeRule, wallet_codeItem)
	}

	logs, sub, err := _Business.contract.FilterLogs(opts, "event_reCreateStash", wallet_codeRule)
	if err != nil {
		return nil, err
	}
	return &BusinessEventReCreateStashIterator{contract: _Business.contract, event: "event_reCreateStash", logs: logs, sub: sub}, nil
}

// WatchEventReCreateStash is a free log subscription operation binding the contract event 0x8c8e3419f9e71366ada9d23ae8a8dba5229a20e91deb3cab00f419ea5b0480e8.
//
// Solidity: event event_reCreateStash(bytes32 indexed wallet_code, address old_wallet_address, address new_wallet_address, int8 wallet_type)
func (_Business *BusinessFilterer) WatchEventReCreateStash(opts *bind.WatchOpts, sink chan<- *BusinessEventReCreateStash, wallet_code [][32]byte) (event.Subscription, error) {

	var wallet_codeRule []interface{}
	for _, wallet_codeItem := range wallet_code {
		wallet_codeRule = append(wallet_codeRule, wallet_codeItem)
	}

	logs, sub, err := _Business.contract.WatchLogs(opts, "event_reCreateStash", wallet_codeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BusinessEventReCreateStash)
				if err := _Business.contract.UnpackLog(event, "event_reCreateStash", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// BusinessEventRegisterAccETHIterator is returned from FilterEventRegisterAccETH and is used to iterate over the raw logs and unpacked data for EventRegisterAccETH events raised by the Business contract.
type BusinessEventRegisterAccETHIterator struct {
	Event *BusinessEventRegisterAccETH // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BusinessEventRegisterAccETHIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BusinessEventRegisterAccETH)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BusinessEventRegisterAccETH)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BusinessEventRegisterAccETHIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BusinessEventRegisterAccETHIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BusinessEventRegisterAccETH represents a EventRegisterAccETH event raised by the Business contract.
type BusinessEventRegisterAccETH struct {
	ListAcc []common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterEventRegisterAccETH is a free log retrieval operation binding the contract event 0x3b0686a3c64982476da002e36939997a11d9ef748420920b111c3ba5d2e9784f.
//
// Solidity: event event_registerAccETH(address[] listAcc)
func (_Business *BusinessFilterer) FilterEventRegisterAccETH(opts *bind.FilterOpts) (*BusinessEventRegisterAccETHIterator, error) {

	logs, sub, err := _Business.contract.FilterLogs(opts, "event_registerAccETH")
	if err != nil {
		return nil, err
	}
	return &BusinessEventRegisterAccETHIterator{contract: _Business.contract, event: "event_registerAccETH", logs: logs, sub: sub}, nil
}

// WatchEventRegisterAccETH is a free log subscription operation binding the contract event 0x3b0686a3c64982476da002e36939997a11d9ef748420920b111c3ba5d2e9784f.
//
// Solidity: event event_registerAccETH(address[] listAcc)
func (_Business *BusinessFilterer) WatchEventRegisterAccETH(opts *bind.WatchOpts, sink chan<- *BusinessEventRegisterAccETH) (event.Subscription, error) {

	logs, sub, err := _Business.contract.WatchLogs(opts, "event_registerAccETH")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BusinessEventRegisterAccETH)
				if err := _Business.contract.UnpackLog(event, "event_registerAccETH", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// BusinessEventSetStateIterator is returned from FilterEventSetState and is used to iterate over the raw logs and unpacked data for EventSetState events raised by the Business contract.
type BusinessEventSetStateIterator struct {
	Event *BusinessEventSetState // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BusinessEventSetStateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BusinessEventSetState)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BusinessEventSetState)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BusinessEventSetStateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BusinessEventSetStateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BusinessEventSetState represents a EventSetState event raised by the Business contract.
type BusinessEventSetState struct {
	WalletCode [32]byte
	StashState int8
	OldState   *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterEventSetState is a free log retrieval operation binding the contract event 0x787d29ad64e9e02e1fb29fb54868408884d3969457c61da4943ec8d57e8ac011.
//
// Solidity: event event_setState(bytes32 indexed wallet_code, int8 stashState, int256 oldState)
func (_Business *BusinessFilterer) FilterEventSetState(opts *bind.FilterOpts, wallet_code [][32]byte) (*BusinessEventSetStateIterator, error) {

	var wallet_codeRule []interface{}
	for _, wallet_codeItem := range wallet_code {
		wallet_codeRule = append(wallet_codeRule, wallet_codeItem)
	}

	logs, sub, err := _Business.contract.FilterLogs(opts, "event_setState", wallet_codeRule)
	if err != nil {
		return nil, err
	}
	return &BusinessEventSetStateIterator{contract: _Business.contract, event: "event_setState", logs: logs, sub: sub}, nil
}

// WatchEventSetState is a free log subscription operation binding the contract event 0x787d29ad64e9e02e1fb29fb54868408884d3969457c61da4943ec8d57e8ac011.
//
// Solidity: event event_setState(bytes32 indexed wallet_code, int8 stashState, int256 oldState)
func (_Business *BusinessFilterer) WatchEventSetState(opts *bind.WatchOpts, sink chan<- *BusinessEventSetState, wallet_code [][32]byte) (event.Subscription, error) {

	var wallet_codeRule []interface{}
	for _, wallet_codeItem := range wallet_code {
		wallet_codeRule = append(wallet_codeRule, wallet_codeItem)
	}

	logs, sub, err := _Business.contract.WatchLogs(opts, "event_setState", wallet_codeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BusinessEventSetState)
				if err := _Business.contract.UnpackLog(event, "event_setState", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// BusinessEventTransferIterator is returned from FilterEventTransfer and is used to iterate over the raw logs and unpacked data for EventTransfer events raised by the Business contract.
type BusinessEventTransferIterator struct {
	Event *BusinessEventTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BusinessEventTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BusinessEventTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BusinessEventTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BusinessEventTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BusinessEventTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BusinessEventTransfer represents a EventTransfer event raised by the Business contract.
type BusinessEventTransfer struct {
	TxRef       [32]byte
	Sender      [32]byte
	Receiver    [32]byte
	Amount      *big.Int
	Note        string
	TxType      int8
	SenderBal   *big.Int
	ReceiverBal *big.Int
	Timestamp   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterEventTransfer is a free log retrieval operation binding the contract event 0x20244c6c280a8d1e1be518a3fc3acb8c46f303ad98dd9ec4c01baf9e2999f82e.
//
// Solidity: event event_transfer(bytes32 indexed txRef, bytes32 indexed sender, bytes32 indexed receiver, int256 amount, string note, int8 txType, int256 sender_bal, int256 receiver_bal, uint256 timestamp)
func (_Business *BusinessFilterer) FilterEventTransfer(opts *bind.FilterOpts, txRef [][32]byte, sender [][32]byte, receiver [][32]byte) (*BusinessEventTransferIterator, error) {

	var txRefRule []interface{}
	for _, txRefItem := range txRef {
		txRefRule = append(txRefRule, txRefItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}

	logs, sub, err := _Business.contract.FilterLogs(opts, "event_transfer", txRefRule, senderRule, receiverRule)
	if err != nil {
		return nil, err
	}
	return &BusinessEventTransferIterator{contract: _Business.contract, event: "event_transfer", logs: logs, sub: sub}, nil
}

// WatchEventTransfer is a free log subscription operation binding the contract event 0x20244c6c280a8d1e1be518a3fc3acb8c46f303ad98dd9ec4c01baf9e2999f82e.
//
// Solidity: event event_transfer(bytes32 indexed txRef, bytes32 indexed sender, bytes32 indexed receiver, int256 amount, string note, int8 txType, int256 sender_bal, int256 receiver_bal, uint256 timestamp)
func (_Business *BusinessFilterer) WatchEventTransfer(opts *bind.WatchOpts, sink chan<- *BusinessEventTransfer, txRef [][32]byte, sender [][32]byte, receiver [][32]byte) (event.Subscription, error) {

	var txRefRule []interface{}
	for _, txRefItem := range txRef {
		txRefRule = append(txRefRule, txRefItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}

	logs, sub, err := _Business.contract.WatchLogs(opts, "event_transfer", txRefRule, senderRule, receiverRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BusinessEventTransfer)
				if err := _Business.contract.UnpackLog(event, "event_transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OwnedABI is the input ABI used to generate the binding from.
const OwnedABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"_newMember\",\"type\":\"address\"}],\"name\":\"registerMemberApi\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMemberApiIdxLenght\",\"outputs\":[{\"name\":\"\",\"type\":\"int16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]"

// OwnedBin is the compiled bytecode used for deploying new contracts.
const OwnedBin = `0x608060405234801561001057600080fd5b50600080546001600160a01b03191633179055610278806100326000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630d3b2b6f14610051578063893d20e814610079578063a6f9dae11461009d578063e45ab733146100c3575b600080fd5b6100776004803603602081101561006757600080fd5b50356001600160a01b03166100e4565b005b610081610199565b604080516001600160a01b039092168252519081900360200190f35b610077600480360360208110156100b357600080fd5b50356001600160a01b03166101a8565b6100cb61021b565b60408051600192830b90920b8252519081900360200190f35b3360009081526001602052604090205460ff1661013557604051600160e51b62461bcd02815260040180806020018281038252602b815260200180610222602b913960400191505060405180910390fd5b6001600160a01b031660008181526001602081905260408220805460ff1916821790556002805491820181559091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319169091179055565b6000546001600160a01b031690565b3360009081526001602052604090205460ff166101f957604051600160e51b62461bcd02815260040180806020018281038252602b815260200180610222602b913960400191505060405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6002549056fe4348492043414320414343204554482044412044414e47204b59204d4f4920474f492044554f432048414da165627a7a7230582048e8cf68cdfe7915dbb4a498846b0e3b36baa4c5b02f5b9f03d1ca8a57f036660029`

// DeployOwned deploys a new Ethereum contract, binding an instance of Owned to it.
func DeployOwned(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Owned, error) {
	parsed, err := abi.JSON(strings.NewReader(OwnedABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OwnedBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Owned{OwnedCaller: OwnedCaller{contract: contract}, OwnedTransactor: OwnedTransactor{contract: contract}, OwnedFilterer: OwnedFilterer{contract: contract}}, nil
}

// Owned is an auto generated Go binding around an Ethereum contract.
type Owned struct {
	OwnedCaller     // Read-only binding to the contract
	OwnedTransactor // Write-only binding to the contract
	OwnedFilterer   // Log filterer for contract events
}

// OwnedCaller is an auto generated read-only Go binding around an Ethereum contract.
type OwnedCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnedTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OwnedTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnedFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OwnedFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnedSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OwnedSession struct {
	Contract     *Owned            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OwnedCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OwnedCallerSession struct {
	Contract *OwnedCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// OwnedTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OwnedTransactorSession struct {
	Contract     *OwnedTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OwnedRaw is an auto generated low-level Go binding around an Ethereum contract.
type OwnedRaw struct {
	Contract *Owned // Generic contract binding to access the raw methods on
}

// OwnedCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OwnedCallerRaw struct {
	Contract *OwnedCaller // Generic read-only contract binding to access the raw methods on
}

// OwnedTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OwnedTransactorRaw struct {
	Contract *OwnedTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOwned creates a new instance of Owned, bound to a specific deployed contract.
func NewOwned(address common.Address, backend bind.ContractBackend) (*Owned, error) {
	contract, err := bindOwned(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Owned{OwnedCaller: OwnedCaller{contract: contract}, OwnedTransactor: OwnedTransactor{contract: contract}, OwnedFilterer: OwnedFilterer{contract: contract}}, nil
}

// NewOwnedCaller creates a new read-only instance of Owned, bound to a specific deployed contract.
func NewOwnedCaller(address common.Address, caller bind.ContractCaller) (*OwnedCaller, error) {
	contract, err := bindOwned(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OwnedCaller{contract: contract}, nil
}

// NewOwnedTransactor creates a new write-only instance of Owned, bound to a specific deployed contract.
func NewOwnedTransactor(address common.Address, transactor bind.ContractTransactor) (*OwnedTransactor, error) {
	contract, err := bindOwned(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OwnedTransactor{contract: contract}, nil
}

// NewOwnedFilterer creates a new log filterer instance of Owned, bound to a specific deployed contract.
func NewOwnedFilterer(address common.Address, filterer bind.ContractFilterer) (*OwnedFilterer, error) {
	contract, err := bindOwned(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OwnedFilterer{contract: contract}, nil
}

// bindOwned binds a generic wrapper to an already deployed contract.
func bindOwned(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OwnedABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Owned *OwnedRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Owned.Contract.OwnedCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Owned *OwnedRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Owned.Contract.OwnedTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Owned *OwnedRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Owned.Contract.OwnedTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Owned *OwnedCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Owned.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Owned *OwnedTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Owned.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Owned *OwnedTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Owned.Contract.contract.Transact(opts, method, params...)
}

// GetMemberApiIdxLenght is a free data retrieval call binding the contract method 0xe45ab733.
//
// Solidity: function getMemberApiIdxLenght() constant returns(int16)
func (_Owned *OwnedCaller) GetMemberApiIdxLenght(opts *bind.CallOpts) (int16, error) {
	var (
		ret0 = new(int16)
	)
	out := ret0
	err := _Owned.contract.Call(opts, out, "getMemberApiIdxLenght")
	return *ret0, err
}

// GetMemberApiIdxLenght is a free data retrieval call binding the contract method 0xe45ab733.
//
// Solidity: function getMemberApiIdxLenght() constant returns(int16)
func (_Owned *OwnedSession) GetMemberApiIdxLenght() (int16, error) {
	return _Owned.Contract.GetMemberApiIdxLenght(&_Owned.CallOpts)
}

// GetMemberApiIdxLenght is a free data retrieval call binding the contract method 0xe45ab733.
//
// Solidity: function getMemberApiIdxLenght() constant returns(int16)
func (_Owned *OwnedCallerSession) GetMemberApiIdxLenght() (int16, error) {
	return _Owned.Contract.GetMemberApiIdxLenght(&_Owned.CallOpts)
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() constant returns(address)
func (_Owned *OwnedCaller) GetOwner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Owned.contract.Call(opts, out, "getOwner")
	return *ret0, err
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() constant returns(address)
func (_Owned *OwnedSession) GetOwner() (common.Address, error) {
	return _Owned.Contract.GetOwner(&_Owned.CallOpts)
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() constant returns(address)
func (_Owned *OwnedCallerSession) GetOwner() (common.Address, error) {
	return _Owned.Contract.GetOwner(&_Owned.CallOpts)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0xa6f9dae1.
//
// Solidity: function changeOwner(address _newOwner) returns()
func (_Owned *OwnedTransactor) ChangeOwner(opts *bind.TransactOpts, _newOwner common.Address) (*types.Transaction, error) {
	return _Owned.contract.Transact(opts, "changeOwner", _newOwner)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0xa6f9dae1.
//
// Solidity: function changeOwner(address _newOwner) returns()
func (_Owned *OwnedSession) ChangeOwner(_newOwner common.Address) (*types.Transaction, error) {
	return _Owned.Contract.ChangeOwner(&_Owned.TransactOpts, _newOwner)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0xa6f9dae1.
//
// Solidity: function changeOwner(address _newOwner) returns()
func (_Owned *OwnedTransactorSession) ChangeOwner(_newOwner common.Address) (*types.Transaction, error) {
	return _Owned.Contract.ChangeOwner(&_Owned.TransactOpts, _newOwner)
}

// RegisterMemberApi is a paid mutator transaction binding the contract method 0x0d3b2b6f.
//
// Solidity: function registerMemberApi(address _newMember) returns()
func (_Owned *OwnedTransactor) RegisterMemberApi(opts *bind.TransactOpts, _newMember common.Address) (*types.Transaction, error) {
	return _Owned.contract.Transact(opts, "registerMemberApi", _newMember)
}

// RegisterMemberApi is a paid mutator transaction binding the contract method 0x0d3b2b6f.
//
// Solidity: function registerMemberApi(address _newMember) returns()
func (_Owned *OwnedSession) RegisterMemberApi(_newMember common.Address) (*types.Transaction, error) {
	return _Owned.Contract.RegisterMemberApi(&_Owned.TransactOpts, _newMember)
}

// RegisterMemberApi is a paid mutator transaction binding the contract method 0x0d3b2b6f.
//
// Solidity: function registerMemberApi(address _newMember) returns()
func (_Owned *OwnedTransactorSession) RegisterMemberApi(_newMember common.Address) (*types.Transaction, error) {
	return _Owned.Contract.RegisterMemberApi(&_Owned.TransactOpts, _newMember)
}

// StashABI is the input ABI used to generate the binding from.
const StashABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"_crAmt\",\"type\":\"int256\"}],\"name\":\"credit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMember\",\"type\":\"address\"}],\"name\":\"registerMemberApi\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getType\",\"outputs\":[{\"name\":\"\",\"type\":\"int8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"name\":\"\",\"type\":\"int8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stateStash\",\"type\":\"int8\"}],\"name\":\"setState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_typeState\",\"type\":\"int8\"}],\"name\":\"setType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dAmt\",\"type\":\"int256\"}],\"name\":\"debit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dAmt\",\"type\":\"int256\"}],\"name\":\"safe_debit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMemberApiIdxLenght\",\"outputs\":[{\"name\":\"\",\"type\":\"int16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_walletCode\",\"type\":\"bytes32\"},{\"name\":\"_typeState\",\"type\":\"int8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]"

// StashBin is the compiled bytecode used for deploying new contracts.
const StashBin = `0x608060405234801561001057600080fd5b5060405160408061064f8339810180604052604081101561003057600080fd5b508051602090910151600080546001600160a01b03191633178155600392909255600580549190920b60ff166101000261ff00199091161790556105d6806100796000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063624cd31711610071578063624cd3171461016157806369c8374314610181578063893d20e81461019e5780638c1fdf82146101c2578063a6f9dae1146101df578063e45ab73314610205576100b4565b806304d4f624146100b95780630d3b2b6f146100d857806312065fe0146100fe57806315dae03e146101185780631865c57d146101395780631fed9efb14610141575b600080fd5b6100d6600480360360208110156100cf57600080fd5b5035610226565b005b6100d6600480360360208110156100ee57600080fd5b50356001600160a01b031661027d565b610106610332565b60408051918252519081900360200190f35b610120610338565b60408051600092830b90920b8252519081900360200190f35b610120610346565b6100d66004803603602081101561015757600080fd5b503560000b61034f565b6100d66004803603602081101561017757600080fd5b503560000b6103b6565b6100d66004803603602081101561019757600080fd5b5035610422565b6101a661047a565b604080516001600160a01b039092168252519081900360200190f35b6100d6600480360360208110156101d857600080fd5b5035610489565b6100d6600480360360208110156101f557600080fd5b50356001600160a01b03166104e3565b61020d610556565b60408051600192830b90920b8252519081900360200190f35b6000546001600160a01b0316331461027257604051600160e51b62461bcd02815260040180806020018281038252602381526020018061055d6023913960400191505060405180910390fd5b600480549091019055565b3360009081526001602052604090205460ff166102ce57604051600160e51b62461bcd02815260040180806020018281038252602b815260200180610580602b913960400191505060405180910390fd5b6001600160a01b031660008181526001602081905260408220805460ff1916821790556002805491820181559091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319169091179055565b60045490565b600554610100900460000b90565b60055460000b90565b6000546001600160a01b0316331461039b57604051600160e51b62461bcd02815260040180806020018281038252602381526020018061055d6023913960400191505060405180910390fd5b6005805460009290920b60ff1660ff19909216919091179055565b6000546001600160a01b0316331461040257604051600160e51b62461bcd02815260040180806020018281038252602381526020018061055d6023913960400191505060405180910390fd5b6005805460009290920b60ff166101000261ff0019909216919091179055565b6000546001600160a01b0316331461046e57604051600160e51b62461bcd02815260040180806020018281038252602381526020018061055d6023913960400191505060405180910390fd5b60048054919091039055565b6000546001600160a01b031690565b6000546001600160a01b031633146104d557604051600160e51b62461bcd02815260040180806020018281038252602381526020018061055d6023913960400191505060405180910390fd5b600454811261046e57600080fd5b3360009081526001602052604090205460ff1661053457604051600160e51b62461bcd02815260040180806020018281038252602b815260200180610580602b913960400191505060405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6002549056fe434849204f574e455220434f4e5452414354204d4f492044554f4320474f492048414d4348492043414320414343204554482044412044414e47204b59204d4f4920474f492044554f432048414da165627a7a72305820ee866f8eb32d05fa9fc7984e9333972d2a90f11b514c2ed8e6b33d2ad604fdce0029`

// DeployStash deploys a new Ethereum contract, binding an instance of Stash to it.
func DeployStash(auth *bind.TransactOpts, backend bind.ContractBackend, _walletCode [32]byte, _typeState int8) (common.Address, *types.Transaction, *Stash, error) {
	parsed, err := abi.JSON(strings.NewReader(StashABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(StashBin), backend, _walletCode, _typeState)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Stash{StashCaller: StashCaller{contract: contract}, StashTransactor: StashTransactor{contract: contract}, StashFilterer: StashFilterer{contract: contract}}, nil
}

// Stash is an auto generated Go binding around an Ethereum contract.
type Stash struct {
	StashCaller     // Read-only binding to the contract
	StashTransactor // Write-only binding to the contract
	StashFilterer   // Log filterer for contract events
}

// StashCaller is an auto generated read-only Go binding around an Ethereum contract.
type StashCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StashTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StashTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StashFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StashFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StashSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StashSession struct {
	Contract     *Stash            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StashCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StashCallerSession struct {
	Contract *StashCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// StashTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StashTransactorSession struct {
	Contract     *StashTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StashRaw is an auto generated low-level Go binding around an Ethereum contract.
type StashRaw struct {
	Contract *Stash // Generic contract binding to access the raw methods on
}

// StashCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StashCallerRaw struct {
	Contract *StashCaller // Generic read-only contract binding to access the raw methods on
}

// StashTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StashTransactorRaw struct {
	Contract *StashTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStash creates a new instance of Stash, bound to a specific deployed contract.
func NewStash(address common.Address, backend bind.ContractBackend) (*Stash, error) {
	contract, err := bindStash(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Stash{StashCaller: StashCaller{contract: contract}, StashTransactor: StashTransactor{contract: contract}, StashFilterer: StashFilterer{contract: contract}}, nil
}

// NewStashCaller creates a new read-only instance of Stash, bound to a specific deployed contract.
func NewStashCaller(address common.Address, caller bind.ContractCaller) (*StashCaller, error) {
	contract, err := bindStash(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StashCaller{contract: contract}, nil
}

// NewStashTransactor creates a new write-only instance of Stash, bound to a specific deployed contract.
func NewStashTransactor(address common.Address, transactor bind.ContractTransactor) (*StashTransactor, error) {
	contract, err := bindStash(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StashTransactor{contract: contract}, nil
}

// NewStashFilterer creates a new log filterer instance of Stash, bound to a specific deployed contract.
func NewStashFilterer(address common.Address, filterer bind.ContractFilterer) (*StashFilterer, error) {
	contract, err := bindStash(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StashFilterer{contract: contract}, nil
}

// bindStash binds a generic wrapper to an already deployed contract.
func bindStash(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StashABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Stash *StashRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Stash.Contract.StashCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Stash *StashRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Stash.Contract.StashTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Stash *StashRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Stash.Contract.StashTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Stash *StashCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Stash.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Stash *StashTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Stash.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Stash *StashTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Stash.Contract.contract.Transact(opts, method, params...)
}

// GetBalance is a free data retrieval call binding the contract method 0x12065fe0.
//
// Solidity: function getBalance() constant returns(int256)
func (_Stash *StashCaller) GetBalance(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Stash.contract.Call(opts, out, "getBalance")
	return *ret0, err
}

// GetBalance is a free data retrieval call binding the contract method 0x12065fe0.
//
// Solidity: function getBalance() constant returns(int256)
func (_Stash *StashSession) GetBalance() (*big.Int, error) {
	return _Stash.Contract.GetBalance(&_Stash.CallOpts)
}

// GetBalance is a free data retrieval call binding the contract method 0x12065fe0.
//
// Solidity: function getBalance() constant returns(int256)
func (_Stash *StashCallerSession) GetBalance() (*big.Int, error) {
	return _Stash.Contract.GetBalance(&_Stash.CallOpts)
}

// GetMemberApiIdxLenght is a free data retrieval call binding the contract method 0xe45ab733.
//
// Solidity: function getMemberApiIdxLenght() constant returns(int16)
func (_Stash *StashCaller) GetMemberApiIdxLenght(opts *bind.CallOpts) (int16, error) {
	var (
		ret0 = new(int16)
	)
	out := ret0
	err := _Stash.contract.Call(opts, out, "getMemberApiIdxLenght")
	return *ret0, err
}

// GetMemberApiIdxLenght is a free data retrieval call binding the contract method 0xe45ab733.
//
// Solidity: function getMemberApiIdxLenght() constant returns(int16)
func (_Stash *StashSession) GetMemberApiIdxLenght() (int16, error) {
	return _Stash.Contract.GetMemberApiIdxLenght(&_Stash.CallOpts)
}

// GetMemberApiIdxLenght is a free data retrieval call binding the contract method 0xe45ab733.
//
// Solidity: function getMemberApiIdxLenght() constant returns(int16)
func (_Stash *StashCallerSession) GetMemberApiIdxLenght() (int16, error) {
	return _Stash.Contract.GetMemberApiIdxLenght(&_Stash.CallOpts)
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() constant returns(address)
func (_Stash *StashCaller) GetOwner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Stash.contract.Call(opts, out, "getOwner")
	return *ret0, err
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() constant returns(address)
func (_Stash *StashSession) GetOwner() (common.Address, error) {
	return _Stash.Contract.GetOwner(&_Stash.CallOpts)
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() constant returns(address)
func (_Stash *StashCallerSession) GetOwner() (common.Address, error) {
	return _Stash.Contract.GetOwner(&_Stash.CallOpts)
}

// GetState is a free data retrieval call binding the contract method 0x1865c57d.
//
// Solidity: function getState() constant returns(int8)
func (_Stash *StashCaller) GetState(opts *bind.CallOpts) (int8, error) {
	var (
		ret0 = new(int8)
	)
	out := ret0
	err := _Stash.contract.Call(opts, out, "getState")
	return *ret0, err
}

// GetState is a free data retrieval call binding the contract method 0x1865c57d.
//
// Solidity: function getState() constant returns(int8)
func (_Stash *StashSession) GetState() (int8, error) {
	return _Stash.Contract.GetState(&_Stash.CallOpts)
}

// GetState is a free data retrieval call binding the contract method 0x1865c57d.
//
// Solidity: function getState() constant returns(int8)
func (_Stash *StashCallerSession) GetState() (int8, error) {
	return _Stash.Contract.GetState(&_Stash.CallOpts)
}

// GetType is a free data retrieval call binding the contract method 0x15dae03e.
//
// Solidity: function getType() constant returns(int8)
func (_Stash *StashCaller) GetType(opts *bind.CallOpts) (int8, error) {
	var (
		ret0 = new(int8)
	)
	out := ret0
	err := _Stash.contract.Call(opts, out, "getType")
	return *ret0, err
}

// GetType is a free data retrieval call binding the contract method 0x15dae03e.
//
// Solidity: function getType() constant returns(int8)
func (_Stash *StashSession) GetType() (int8, error) {
	return _Stash.Contract.GetType(&_Stash.CallOpts)
}

// GetType is a free data retrieval call binding the contract method 0x15dae03e.
//
// Solidity: function getType() constant returns(int8)
func (_Stash *StashCallerSession) GetType() (int8, error) {
	return _Stash.Contract.GetType(&_Stash.CallOpts)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0xa6f9dae1.
//
// Solidity: function changeOwner(address _newOwner) returns()
func (_Stash *StashTransactor) ChangeOwner(opts *bind.TransactOpts, _newOwner common.Address) (*types.Transaction, error) {
	return _Stash.contract.Transact(opts, "changeOwner", _newOwner)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0xa6f9dae1.
//
// Solidity: function changeOwner(address _newOwner) returns()
func (_Stash *StashSession) ChangeOwner(_newOwner common.Address) (*types.Transaction, error) {
	return _Stash.Contract.ChangeOwner(&_Stash.TransactOpts, _newOwner)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0xa6f9dae1.
//
// Solidity: function changeOwner(address _newOwner) returns()
func (_Stash *StashTransactorSession) ChangeOwner(_newOwner common.Address) (*types.Transaction, error) {
	return _Stash.Contract.ChangeOwner(&_Stash.TransactOpts, _newOwner)
}

// Credit is a paid mutator transaction binding the contract method 0x04d4f624.
//
// Solidity: function credit(int256 _crAmt) returns()
func (_Stash *StashTransactor) Credit(opts *bind.TransactOpts, _crAmt *big.Int) (*types.Transaction, error) {
	return _Stash.contract.Transact(opts, "credit", _crAmt)
}

// Credit is a paid mutator transaction binding the contract method 0x04d4f624.
//
// Solidity: function credit(int256 _crAmt) returns()
func (_Stash *StashSession) Credit(_crAmt *big.Int) (*types.Transaction, error) {
	return _Stash.Contract.Credit(&_Stash.TransactOpts, _crAmt)
}

// Credit is a paid mutator transaction binding the contract method 0x04d4f624.
//
// Solidity: function credit(int256 _crAmt) returns()
func (_Stash *StashTransactorSession) Credit(_crAmt *big.Int) (*types.Transaction, error) {
	return _Stash.Contract.Credit(&_Stash.TransactOpts, _crAmt)
}

// Debit is a paid mutator transaction binding the contract method 0x69c83743.
//
// Solidity: function debit(int256 _dAmt) returns()
func (_Stash *StashTransactor) Debit(opts *bind.TransactOpts, _dAmt *big.Int) (*types.Transaction, error) {
	return _Stash.contract.Transact(opts, "debit", _dAmt)
}

// Debit is a paid mutator transaction binding the contract method 0x69c83743.
//
// Solidity: function debit(int256 _dAmt) returns()
func (_Stash *StashSession) Debit(_dAmt *big.Int) (*types.Transaction, error) {
	return _Stash.Contract.Debit(&_Stash.TransactOpts, _dAmt)
}

// Debit is a paid mutator transaction binding the contract method 0x69c83743.
//
// Solidity: function debit(int256 _dAmt) returns()
func (_Stash *StashTransactorSession) Debit(_dAmt *big.Int) (*types.Transaction, error) {
	return _Stash.Contract.Debit(&_Stash.TransactOpts, _dAmt)
}

// RegisterMemberApi is a paid mutator transaction binding the contract method 0x0d3b2b6f.
//
// Solidity: function registerMemberApi(address _newMember) returns()
func (_Stash *StashTransactor) RegisterMemberApi(opts *bind.TransactOpts, _newMember common.Address) (*types.Transaction, error) {
	return _Stash.contract.Transact(opts, "registerMemberApi", _newMember)
}

// RegisterMemberApi is a paid mutator transaction binding the contract method 0x0d3b2b6f.
//
// Solidity: function registerMemberApi(address _newMember) returns()
func (_Stash *StashSession) RegisterMemberApi(_newMember common.Address) (*types.Transaction, error) {
	return _Stash.Contract.RegisterMemberApi(&_Stash.TransactOpts, _newMember)
}

// RegisterMemberApi is a paid mutator transaction binding the contract method 0x0d3b2b6f.
//
// Solidity: function registerMemberApi(address _newMember) returns()
func (_Stash *StashTransactorSession) RegisterMemberApi(_newMember common.Address) (*types.Transaction, error) {
	return _Stash.Contract.RegisterMemberApi(&_Stash.TransactOpts, _newMember)
}

// SafeDebit is a paid mutator transaction binding the contract method 0x8c1fdf82.
//
// Solidity: function safe_debit(int256 _dAmt) returns()
func (_Stash *StashTransactor) SafeDebit(opts *bind.TransactOpts, _dAmt *big.Int) (*types.Transaction, error) {
	return _Stash.contract.Transact(opts, "safe_debit", _dAmt)
}

// SafeDebit is a paid mutator transaction binding the contract method 0x8c1fdf82.
//
// Solidity: function safe_debit(int256 _dAmt) returns()
func (_Stash *StashSession) SafeDebit(_dAmt *big.Int) (*types.Transaction, error) {
	return _Stash.Contract.SafeDebit(&_Stash.TransactOpts, _dAmt)
}

// SafeDebit is a paid mutator transaction binding the contract method 0x8c1fdf82.
//
// Solidity: function safe_debit(int256 _dAmt) returns()
func (_Stash *StashTransactorSession) SafeDebit(_dAmt *big.Int) (*types.Transaction, error) {
	return _Stash.Contract.SafeDebit(&_Stash.TransactOpts, _dAmt)
}

// SetState is a paid mutator transaction binding the contract method 0x1fed9efb.
//
// Solidity: function setState(int8 _stateStash) returns()
func (_Stash *StashTransactor) SetState(opts *bind.TransactOpts, _stateStash int8) (*types.Transaction, error) {
	return _Stash.contract.Transact(opts, "setState", _stateStash)
}

// SetState is a paid mutator transaction binding the contract method 0x1fed9efb.
//
// Solidity: function setState(int8 _stateStash) returns()
func (_Stash *StashSession) SetState(_stateStash int8) (*types.Transaction, error) {
	return _Stash.Contract.SetState(&_Stash.TransactOpts, _stateStash)
}

// SetState is a paid mutator transaction binding the contract method 0x1fed9efb.
//
// Solidity: function setState(int8 _stateStash) returns()
func (_Stash *StashTransactorSession) SetState(_stateStash int8) (*types.Transaction, error) {
	return _Stash.Contract.SetState(&_Stash.TransactOpts, _stateStash)
}

// SetType is a paid mutator transaction binding the contract method 0x624cd317.
//
// Solidity: function setType(int8 _typeState) returns()
func (_Stash *StashTransactor) SetType(opts *bind.TransactOpts, _typeState int8) (*types.Transaction, error) {
	return _Stash.contract.Transact(opts, "setType", _typeState)
}

// SetType is a paid mutator transaction binding the contract method 0x624cd317.
//
// Solidity: function setType(int8 _typeState) returns()
func (_Stash *StashSession) SetType(_typeState int8) (*types.Transaction, error) {
	return _Stash.Contract.SetType(&_Stash.TransactOpts, _typeState)
}

// SetType is a paid mutator transaction binding the contract method 0x624cd317.
//
// Solidity: function setType(int8 _typeState) returns()
func (_Stash *StashTransactorSession) SetType(_typeState int8) (*types.Transaction, error) {
	return _Stash.Contract.SetType(&_Stash.TransactOpts, _typeState)
}
